// Copyright (c) 2023 Sam Blenny
// SPDX-License-Identifier: MIT
//
// THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT MAKE EDITS HERE
// See codegen.py for details
//
#ifndef MKB_AUTOGEN_H
#define MKB_AUTOGEN_H

#include <stdint.h>

// Markab VM opcode constants
#define MK_NOP    ( 0)
#define MK_RESET  ( 1)
#define MK_JMP    ( 2)
#define MK_JAL    ( 3)
#define MK_RET    ( 4)
#define MK_BZ     ( 5)
#define MK_BFOR   ( 6)
#define MK_U8     ( 7)
#define MK_U16    ( 8)
#define MK_I32    ( 9)
#define MK_HALT   (10)
#define MK_TRON   (11)
#define MK_TROFF  (12)
#define MK_IODUMP (13)
#define MK_IOKEY  (14)
#define MK_IORH   (15)
#define MK_IOLOAD (16)
#define MK_FOPEN  (17)
#define MK_FREAD  (18)
#define MK_FWRITE (19)
#define MK_FSEEK  (20)
#define MK_FTELL  (21)
#define MK_FTRUNC (22)
#define MK_FCLOSE (23)
#define MK_MTR    (24)
#define MK_R      (25)
#define MK_CALL   (26)
#define MK_PC     (27)
#define MK_MTE    (28)
#define MK_LB     (29)
#define MK_SB     (30)
#define MK_LH     (31)
#define MK_SH     (32)
#define MK_LW     (33)
#define MK_SW     (34)
#define MK_ADD    (35)
#define MK_SUB    (36)
#define MK_MUL    (37)
#define MK_DIV    (38)
#define MK_MOD    (39)
#define MK_SLL    (40)
#define MK_SRL    (41)
#define MK_SRA    (42)
#define MK_INV    (43)
#define MK_XOR    (44)
#define MK_OR     (45)
#define MK_AND    (46)
#define MK_GT     (47)
#define MK_LT     (48)
#define MK_EQ     (49)
#define MK_NE     (50)
#define MK_ZE     (51)
#define MK_INC    (52)
#define MK_DEC    (53)
#define MK_IOEMIT (54)
#define MK_IODOT  (55)
#define MK_IODH   (56)
#define MK_IOD    (57)
#define MK_RDROP  (58)
#define MK_DROP   (59)
#define MK_DUP    (60)
#define MK_OVER   (61)
#define MK_SWAP   (62)
#define MK_MTA    (63)
#define MK_LBA    (64)
#define MK_LBAI   (65)
#define MK_AINC   (66)
#define MK_ADEC   (67)
#define MK_A      (68)
#define MK_MTB    (69)
#define MK_LBB    (70)
#define MK_LBBI   (71)
#define MK_SBBI   (72)
#define MK_BINC   (73)
#define MK_BDEC   (74)
#define MK_B      (75)
#define MK_TRUE   (76)
#define MK_FALSE  (77)

// Markab VM opcode dictionary
#define MK_OPCODES_LEN (78)
extern const char * const mk_opcodes[MK_OPCODES_LEN];

// Markab VM memory map
#define MK_Heap      (0x0000)
#define MK_HeapRes   (0xE000)
#define MK_HeapMax   (0xE0FF)
#define MK_DP        (0xE100)
#define MK_IN        (0xE104)
#define MK_CORE_V    (0xE108)
#define MK_EXT_V     (0xE10C)
#define MK_MODE      (0xE110)
#define MK_LASTCALL  (0xE118)
#define MK_NEST      (0xE11C)
#define MK_BASE      (0xE120)
#define MK_EOF       (0xE124)
#define MK_LASTWORD  (0xE128)
#define MK_IRQRX     (0xE12C)
#define MK_OK_EN     (0xE130)
#define MK_LOADNEST  (0xE134)
#define MK_IRQERR    (0xE138)
#define MK_IB        (0xE200)
#define MK_Pad       (0xE300)
#define MK_Scratch   (0xE400)
#define MK_MemMax    (0xFFFF)

// Markab language enum codes
#define MK_T_VAR       (0)
#define MK_T_CONST     (1)
#define MK_T_OP        (2)
#define MK_T_OBJ       (3)
#define MK_T_IMM       (4)
#define MK_MODE_INT    (0)
#define MK_MODE_COM    (1)
#define MK_ErrUnknown  (11)
#define MK_ErrNest     (12)
#define MK_ErrFilepath (9)
#define MK_HashA       (7)
#define MK_HashB       (8)
#define MK_HashC       (38335)
#define MK_HashBins    (64)
#define MK_HashMask    (63)

// Markab language core vocabulary
#define MK_CORE_VOC_LEN (114)
#define MK_VOC_ITEM_NAME_LEN (16)
typedef struct mk_voc_item {
	const char * const name[MK_VOC_ITEM_NAME_LEN];
	const uint8_t type_code;
	const uint32_t value;
} mk_voc_item_t;
extern const mk_voc_item_t mk_core_voc[MK_CORE_VOC_LEN];

#endif /* MKB_AUTOGEN_H */
