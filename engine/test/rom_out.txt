( Copyright Â© 2022 Sam Blenny)  OK
( SPDX-License-Identifier: MIT)  OK
  OK
: 2d drop drop ;  OK
: 4d 2d 2d ;  OK
: t01 4 for{ r 1 and }for .S ;      t01   (  0 1 0 1  OK)  0 1 0 1  OK
4d  OK
: t02 true  if{ 4 .S ; }if 5 .S ;   t02         (  4  OK)  4  OK
drop  OK
: t03 false if{ 4 .S ; }if 5 .S ;   t03         (  5  OK)  5  OK
drop  OK
.S                                 (  Stack is empty  OK)  Stack is empty  OK
23 const t04 .S                    (  Stack is empty  OK)  Stack is empty  OK
var t05 5 t05 ! .S                 (  Stack is empty  OK)  Stack is empty  OK
0 opcode nop .S                    (  Stack is empty  OK)  Stack is empty  OK
"   t06: a string" print            (  t06: a string  OK)  t06: a string  OK
: t07 "   another one" print ; t07     (  another one OK)  another one  OK
" foo" const t08  " foo" t08 strcmp .           ( -1  OK) -1  OK
" bar" const t09  t08 t09 strcmp .               ( 0  OK) 0  OK
: foo? t08 here word strcmp . ;  foo? foo       ( -1  OK) -1  OK
( t11: Malformed if-block)  OK
: t11 ( missing T=addr from if{ )  }if ;        (  ERR 2)  ERR 2
( fake if{ addr: ) 9000  OK
: t11 ( pops fake addr->) }if ;                (  ERR 12)  ERR 12
nop                                                (  OK)  OK
( t12: Compiling/OK prompts during compile)  OK
: t12 true if{                              (  Compiling)  Compiling
    ;                                       (  Compiling)  Compiling
  }if                                       (  Compiling)  Compiling
;                                                  (  OK)  OK
nop                                                (  OK)  OK
( t15: Attempted infinitely tail-recursive call)  OK
: t15 t15 ;  t15                                (  ERR 8)  ERR 8
nop                                                (  OK)  OK
( t16: Attempted infinitely recursive regular call)  OK
: t16 t16 nop ;  t16                            (  ERR 6)  ERR 6
nop                                                (  OK)  OK
( t17: Attempt to overflow the return stack.    )  OK
(      The juggling of return values is to avoid)  OK
(      git diffs for compiled addresses that can)  OK
(      change each time I modify the kernel code)  OK
: t17  ( n -- )  Compiling
  dup r >a rdrop r >b rdrop cr   ( pop addresses)  Compiling
  ( n) for{ r .Rh >r cr }for                  ( )  Compiling
  ( n) for{ r rdrop rdrop .Rh >r cr }for      ( )  Compiling
  b >r a >r                  ( restore addresses)  Compiling
;  OK
( 16 items is too much)  OK
16 t17
  10
  10 f
  10 f e
  10 f e d
  10 f e d c
  10 f e d c b
  10 f e d c b a
  10 f e d c b a 9
  10 f e d c b a 9 8
  10 f e d c b a 9 8 7
  10 f e d c b a 9 8 7 6
  10 f e d c b a 9 8 7 6 5
  10 f e d c b a 9 8 7 6 5 4
  10 f e d c b a 9 8 7 6 5 4 3
  10 f e d c b a 9 8 7 6 5 4 3 2
  10 f e d c b a 9 8 7 6 5 4 3 2 1  ERR 6
( 15 items is okay)  OK
15 t17
  f
  f e
  f e d
  f e d c
  f e d c b
  f e d c b a
  f e d c b a 9
  f e d c b a 9 8
  f e d c b a 9 8 7
  f e d c b a 9 8 7 6
  f e d c b a 9 8 7 6 5
  f e d c b a 9 8 7 6 5 4
  f e d c b a 9 8 7 6 5 4 3
  f e d c b a 9 8 7 6 5 4 3 2
  f e d c b a 9 8 7 6 5 4 3 2 1
  f e d c b a 9 8 7 6 5 4 3 2
  f e d c b a 9 8 7 6 5 4 3
  f e d c b a 9 8 7 6 5 4
  f e d c b a 9 8 7 6 5
  f e d c b a 9 8 7 6
  f e d c b a 9 8 7
  f e d c b a 9 8
  f e d c b a 9
  f e d c b a
  f e d c b
  f e d c
  f e d
  f e
  f
  R-Stack is empty
  OK
( Test extra whtespace for : )
:  t18 nop ;  ' t18 swap drop .                 ( -1  OK) -1  OK
