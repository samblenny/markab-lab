; Copyright (c) 2022 Sam Blenny
; SPDX-License-Identifier: MIT
;
; ========================================================================
; === CAUTION! This file is automatically generated. Do not edit here. ===
; ========================================================================

;----------------------------
; VM Instruction token values

%define tNext         0
%define tNop          1
%define tBye          2
%define tDup          3
%define tDrop         4
%define tSwap         5
%define tOver         6
%define tClearStack   7
%define tDotS         8
%define tDotQuoteI    9
%define tParen       10
%define tColon       11
%define tEmit        12
%define tCR          13
%define tSpace       14
%define tDot         15
%define tPlus        16
%define tMinus       17
%define tMul         18
%define tDiv         19
%define tMod         20
%define tDivMod      21
%define tMax         22
%define tMin         23
%define tAbs         24
%define tAnd         25
%define tOr          26
%define tXor         27
%define tNot         28
%define tLess        29
%define tGreater     30
%define tEqual       31
%define tZeroLess    32
%define tZeroEqual   33
%define tHex         34
%define tDecimal     35
%define tFetch       36
%define tStore       37
%define tByteFetch   38
%define tByteStore   39
%define tSemiColon   40
%define tDotQuoteC   41
%define tU8          42
%define tU16         43
%define tI8          44
%define tI16         45
%define tI32         46
%define tJump        47
%define tCall        48
%define tClearReturn  49


;------------------------------------------------------------------------
; Jump table (list of dword code label addresses, indexed by token value)

align 16, db 0
db "== Jump Table =="

align 16, db 0
JumpTable:
dd mNext        ;  0
dd mNop         ;  1
dd mBye         ;  2
dd mDup         ;  3
dd mDrop        ;  4
dd mSwap        ;  5
dd mOver        ;  6
dd mClearStack  ;  7
dd mDotS        ;  8
dd mDotQuoteI   ;  9
dd mParen       ; 10
dd mColon       ; 11
dd mEmit        ; 12
dd mCR          ; 13
dd mSpace       ; 14
dd mDot         ; 15
dd mPlus        ; 16
dd mMinus       ; 17
dd mMul         ; 18
dd mDiv         ; 19
dd mMod         ; 20
dd mDivMod      ; 21
dd mMax         ; 22
dd mMin         ; 23
dd mAbs         ; 24
dd mAnd         ; 25
dd mOr          ; 26
dd mXor         ; 27
dd mNot         ; 28
dd mLess        ; 29
dd mGreater     ; 30
dd mEqual       ; 31
dd mZeroLess    ; 32
dd mZeroEqual   ; 33
dd mHex         ; 34
dd mDecimal     ; 35
dd mFetch       ; 36
dd mStore       ; 37
dd mByteFetch   ; 38
dd mByteStore   ; 39
dd mSemiColon   ; 40
dd mDotQuoteC   ; 41
dd mU8          ; 42
dd mU16         ; 43
dd mI8          ; 44
dd mI16         ; 45
dd mI32         ; 46
dd mJump        ; 47
dd mCall        ; 48
dd mClearReturn  ; 49

%define JumpTableLen 50


;-------------------------------------------------------------
; Dictionary linked list (Dct0)

align 16, db 0
db "== Dictionary =="

align 16, db 0
Dct0Tail: dd 0
          db 3, "nop"
          db 0, tNop, tNext
          align 16, db 0
Dct0_001: dd Dct0Tail
          db 3, "bye"
          db 0, tBye, tNext
          align 16, db 0
Dct0_002: dd Dct0_001
          db 3, "dup"
          db 0, tDup, tNext
          align 16, db 0
Dct0_003: dd Dct0_002
          db 4, "drop"
          db 0, tDrop, tNext
          align 16, db 0
Dct0_004: dd Dct0_003
          db 4, "swap"
          db 0, tSwap, tNext
          align 16, db 0
Dct0_005: dd Dct0_004
          db 4, "over"
          db 0, tOver, tNext
          align 16, db 0
Dct0_006: dd Dct0_005
          db 10, "clearstack"
          db 0, tClearStack, tNext
          align 16, db 0
Dct0_007: dd Dct0_006
          db 2, ".s"
          db 0, tDotS, tNext
          align 16, db 0
Dct0_008: dd Dct0_007
          db 2, '."'
          db 0, tDotQuoteI, tNext
          align 16, db 0
Dct0_009: dd Dct0_008
          db 1, "("
          db 0, tParen, tNext
          align 16, db 0
Dct0_010: dd Dct0_009
          db 1, ":"
          db 0, tColon, tNext
          align 16, db 0
Dct0_011: dd Dct0_010
          db 4, "emit"
          db 0, tEmit, tNext
          align 16, db 0
Dct0_012: dd Dct0_011
          db 2, "cr"
          db 0, tCR, tNext
          align 16, db 0
Dct0_013: dd Dct0_012
          db 5, "space"
          db 0, tSpace, tNext
          align 16, db 0
Dct0_014: dd Dct0_013
          db 1, "."
          db 0, tDot, tNext
          align 16, db 0
Dct0_015: dd Dct0_014
          db 1, "+"
          db 0, tPlus, tNext
          align 16, db 0
Dct0_016: dd Dct0_015
          db 1, "-"
          db 0, tMinus, tNext
          align 16, db 0
Dct0_017: dd Dct0_016
          db 1, "*"
          db 0, tMul, tNext
          align 16, db 0
Dct0_018: dd Dct0_017
          db 1, "/"
          db 0, tDiv, tNext
          align 16, db 0
Dct0_019: dd Dct0_018
          db 3, "mod"
          db 0, tMod, tNext
          align 16, db 0
Dct0_020: dd Dct0_019
          db 4, "/mod"
          db 0, tDivMod, tNext
          align 16, db 0
Dct0_021: dd Dct0_020
          db 3, "max"
          db 0, tMax, tNext
          align 16, db 0
Dct0_022: dd Dct0_021
          db 3, "min"
          db 0, tMin, tNext
          align 16, db 0
Dct0_023: dd Dct0_022
          db 3, "abs"
          db 0, tAbs, tNext
          align 16, db 0
Dct0_024: dd Dct0_023
          db 3, "and"
          db 0, tAnd, tNext
          align 16, db 0
Dct0_025: dd Dct0_024
          db 2, "or"
          db 0, tOr, tNext
          align 16, db 0
Dct0_026: dd Dct0_025
          db 3, "xor"
          db 0, tXor, tNext
          align 16, db 0
Dct0_027: dd Dct0_026
          db 3, "not"
          db 0, tNot, tNext
          align 16, db 0
Dct0_028: dd Dct0_027
          db 1, "<"
          db 0, tLess, tNext
          align 16, db 0
Dct0_029: dd Dct0_028
          db 1, ">"
          db 0, tGreater, tNext
          align 16, db 0
Dct0_030: dd Dct0_029
          db 1, "="
          db 0, tEqual, tNext
          align 16, db 0
Dct0_031: dd Dct0_030
          db 2, "0<"
          db 0, tZeroLess, tNext
          align 16, db 0
Dct0_032: dd Dct0_031
          db 2, "0="
          db 0, tZeroEqual, tNext
          align 16, db 0
Dct0_033: dd Dct0_032
          db 3, "hex"
          db 0, tHex, tNext
          align 16, db 0
Dct0_034: dd Dct0_033
          db 7, "decimal"
          db 0, tDecimal, tNext
          align 16, db 0
Dct0_035: dd Dct0_034
          db 1, "@"
          db 0, tFetch, tNext
          align 16, db 0
Dct0_036: dd Dct0_035
          db 1, "!"
          db 0, tStore, tNext
          align 16, db 0
Dct0_037: dd Dct0_036
          db 2, "b@"
          db 0, tByteFetch, tNext
          align 16, db 0
Dct0_038: dd Dct0_037
          db 2, "b!"
          db 0, tByteStore, tNext
          align 16, db 0
Dct0Head: dd Dct0_038
          db 1, ";"
          db 0, tSemiColon, tNext
          align 16, db 0
Dct0End: db 0
