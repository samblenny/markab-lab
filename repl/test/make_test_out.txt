Markab v0.0.1
type 'bye' or ^C to exit
 __  __          _        _
|  \/  |__ _ _ _| |____ _| |__
| |\/| / _` | '_| / / _` | '_ \
|_|  |_\__,_|_| |_\_\__,_|_.__/

  1 2 3
  7  OK
( === test/fetch_store.fs ===)  OK
( -- These should all give errors: --)  OK
-1 @  E13 Address out of range
-1 b@  E13 Address out of range
16384 @  E13 Address out of range
16383 @  E13 Address out of range
16382 @  E13 Address out of range
16381 @  E13 Address out of range
16384 b@  E13 Address out of range
clearstack  OK
1 16384 !  E13 Address out of range
1 16383 !  E13 Address out of range
1 16382 !  E13 Address out of range
1 16381 !  E13 Address out of range
1 16384 !  E13 Address out of range
clearstack  OK
( -- These should give OK: --)  OK
1 0 !  OK
0 @ . 1  OK
2 0 b!  OK
0 b@ . 2  OK
-1 16380 !  OK
16380 @ . -1  OK
35 16383 b!  OK
16383 b@ . 35  OK
( === test/comments.fs ===)  OK
( -- These should give errors: --)  OK
( CR)             (  E8 Expected )
( space CR)       (   E8 Expected )
( space space CR) (    E8 Expected )
( space word CR)  ( word  E8 Expected )
( -- These should give OK: --)  OK
( )  OK
(  )  OK
( word)  OK
( === test/dotquote.fs ===)  OK
( -- These should give errors: --)  OK
( no space)      .""  E7 ? .""
( CR)            ."  E4 Expected "
( space CR)      ."   E4 Expected "
( space word CR) ." word  E4 Expected "
( -- These should give OK: --)  OK
." "  OK
."  "   OK
." word"word  OK
."  word" word  OK
( === test/stack.fs ===)  OK
clearstack  OK
( 1  OK)     1    .s  1  OK
( 1 1  OK)   dup  .s  1 1  OK
( 1  OK)     drop .s  1  OK
( 1 2  OK)   2    .s  1 2  OK
( 2 1  OK)   swap .s  2 1  OK
( 2 1 2  OK) over .s  2 1 2  OK
clearstack  OK
( error)      dup  E1 Stack underflow
( error)     drop  E1 Stack underflow
( error)     swap  E1 Stack underflow
( error)     over  E1 Stack underflow
clearstack  OK
( OK)    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK
( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK) .s  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK
( error)          dup  E2 Stack full
( error)         over  E2 Stack full
( ... 17 16  OK) swap .s  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 16  OK
( ... 15 17  OK) drop .s  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17  OK
clearstack  OK
( error) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  E2 Stack full
( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK) .s  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK
clearstack  OK
( Stack is empty) .s  Stack is empty  OK
( === test/math.fs ===)  OK
clearstack  OK
( 6  OK)                        3  3 + . 6  OK
( 1  OK)                        6  5 - . 1  OK
( -19  OK)                      1 20 - . -19  OK
( 19  OK)                     -19 -1 * . 19  OK
( 2147483647  OK) hex 7fffffff decimal . 2147483647  OK
( 3FFF0001  OK)        hex 7fff 7fff * . 3FFF0001  OK
( error)                           1 0 /  E12 Divide by 0
( error)                         1 0 mod  E12 Divide by 0
( error)                        1 0 /mod  E12 Divide by 0
( 2  OK)             clearstack 9 4 / .s  2  OK
( 1  OK)           clearstack 9 4 mod .s  1  OK
( 1 2 OK)         clearstack 9 4 /mod .s  1 2  OK
( error)                   hex 1ffffeeee  E6 Overflow: 1ffffeeee
( 0  OK)                  ffffffff 1 + . 0  OK
( 1 OK)                 7fffffff dup * . 1  OK
( FFFFFFFF  OK)         decimal -1 hex . FFFFFFFF  OK
( === test/colon_defs.fs ===)  OK
(  OK)    : a ;               a  OK
( B  OK)  : b ."  B" ;        b B  OK
(  OK)    : c ( comment) ;    c  OK
( 3  OK)  : d 1 2 * 1 +  . ;  d 3  OK
( error)  :  E10 Expected name
( error)  : e  E18 Expected ;
( error)  : ;  E18 Expected ;
(  OK)       decimal : f -2147483647 -32768 -128 -1 .s ;  OK
(  OK)  hex : g 80000001 ffff8000 ffffff80 ffffffff .s ;  OK
( -2147483647 -32768 -128 -1  OK)   decimal clearstack f  -2147483647 -32768 -128 -1  OK
( -2147483647 -32768 -128 -1  OK)           clearstack g  -2147483647 -32768 -128 -1  OK
(  OK)         decimal : h 2147483647 65535 255 1 0 .s ;  OK
(  OK)                 hex : i 7fffffff ffff ff 1 0 .s ;  OK
( 2147483647 65535 255 1 0  OK)     decimal clearstack h  2147483647 65535 255 1 0  OK
( 2147483647 65535 255 1 0  OK)             clearstack i  2147483647 65535 255 1 0  OK
( --- Test nested function calls ---)  OK
(  OK)       : f0 swap dup . over + ;  OK
(  OK)                : f1 f0 f0 f0 ;  OK
(  OK)       : fib 1 dup f1 f1 f1 . ;  OK
( 1 1 2 3 5 8 13 21 34 55 89  OK) fib 1 1 2 3 5 8 13 21 34 89  OK
clearstack  OK
( --- Test implicit tail call ---)  OK
(  OK) : start 1 .  : continue 2 . 3 . ;  OK
( 1 2 3  OK)                       start 1 2 3  OK
( 2 3  OK)                      continue 2 3  OK
clearstack  OK
( --- Test maxing out return stack ---)  OK
(  OK)  : rs0 0 space : rs1 1 + 42 emit rs1 nop ;  OK
(     nop here stops tail call optimization ^^^ )  OK
( ***************** E21...)        clearstack rs0 *****************  E21 Return stack full
( ***************** E21...)                   rs0 *****************  E21 Return stack full
( ^^ note auto-recovery from full return stack)  OK
(  17 17  OK)                                  .s  17 17  OK
( --- Test tail call optimization ---)  OK
(  OK)   : tc0 0 . ;  : tc1 1 . tc0 ;  OK
( 1 0  OK)             clearstack tc1 1 0  OK
(  OK)       : tc2 0  : tc3 1 + tc3 ;  OK
(       infinite tail recursion ^^^ )  OK
(  E22...)             clearstack tc2  E22 Loop too long
(  174762  OK)                     .s  174762  OK
( === test/loops.fs ===)  OK
( the 0; word returns if top of stack is 0)  OK
(  OK)        : 9down 9    : L1 0; 1 - dup .      L1 ;  OK
( 8 7 6 5 4 3 2 1 0  OK)                         9down 8 7 6 5 4 3 2 1 0  OK
(  OK)        : 9up 9      : L2 0; 1 - 8 over - . L2 ;  OK
( 0 1 2 3 4 5 6 7 8  OK)                           9up 0 1 2 3 4 5 6 7 8  OK
(  OK)        : 9under -9  : L3 0; 1 + dup .      L3 ;  OK
( -8 -7 -6 -5 -4 -3 -2 -1 0  OK)                9under -8 -7 -6 -5 -4 -3 -2 -1 0  OK
  OK
