Markab v0.0.1
type 'bye' or ^C to exit
 __  __          _        _
|  \/  |__ _ _ _| |____ _| |__
| |\/| / _` | '_| / / _` | '_ \
|_|  |_\__,_|_| |_\_\__,_|_.__/
  OK
( === test/fetch_store.fs ===)  OK
( -- These should all give errors: --)  OK
-1 @  E13 Address out of range
-1 b@  E13 Address out of range
-1 w@  E13 Address out of range
65536 @  E13 Address out of range
65535 @  E13 Address out of range
65534 @  E13 Address out of range
65533 @  E13 Address out of range
65536 b@  E13 Address out of range
65536 w@  E13 Address out of range
65535 w@  E13 Address out of range
clearstack  OK
1 0 !  E13 Address out of range
1 0 w!  E13 Address out of range
1 0 b!  E13 Address out of range
1 65536 !  E13 Address out of range
1 65535 !  E13 Address out of range
1 65534 !  E13 Address out of range
clearstack  OK
1 65533 !  E13 Address out of range
1 65536 w!  E13 Address out of range
1 65535 w!  E13 Address out of range
1 65536 b!  E13 Address out of range
clearstack  OK
( -- These should give OK: --)  OK
1 2000 !  OK
2000 @ . 1  OK
3 2000 w!  OK
2000 w@ . 3  OK
2 2000 b!  OK
2000 b@ . 2  OK
1 65532 !  OK
65532 @ . 1  OK
3 65534 w!  OK
65534 w@ . 3  OK
2 65535 b!  OK
65535 b@ . 2  OK
( === test/comments.fs ===)  OK
( -- These should give errors: --)  OK
( CR)             (  E8 Expected )
( space CR)       (   E8 Expected )
( space space CR) (    E8 Expected )
( space word CR)  ( word  E8 Expected )
( -- These should give OK: --)  OK
( )  OK
(  )  OK
( word)  OK
( === test/dotquote.fs ===)  OK
( -- These should give errors: --)  OK
( no space)      .""  E7 Unknown word: .""
( CR)            ."  E4 Expected "
( space CR)      ."   E4 Expected "
( space word CR) ." word  E4 Expected "
( -- These should give OK: --)  OK
." "  OK
."  "   OK
." word"word  OK
."  word" word  OK
( === test/stack.fs ===)  OK
clearstack  OK
( 1  OK)     1    .s  1  OK
( 1 1  OK)   dup  .s  1 1  OK
( 1  OK)     drop .s  1  OK
( 1 2  OK)   2    .s  1 2  OK
( 2 1  OK)   swap .s  2 1  OK
( 2 1 2  OK) over .s  2 1 2  OK
clearstack  OK
( error)      dup  E1 Stack underflow
( error)     drop  E1 Stack underflow
( error)     swap  E1 Stack underflow
( error)     over  E1 Stack underflow
clearstack  OK
( --- These demonstrate that, while there are 17 stack slots, ---)  OK
( --- processing input text needs 2 of those to be left free. ---)  OK
(  E2...)  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  E2 Stack overflow (cleared stack)
(  OK)        1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
(  E2...)                                         .s  E2 Stack overflow (cleared stack)
(  OK)           1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
(  1 2 ... 14 15  OK)                             .s  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
(   This works -- 2 free slots for parsing and .s ^^)  OK
(  ... 13 15 14  OK)       swap .s  1 2 3 4 5 6 7 8 9 10 11 12 13 15 14  OK
(  ... 13 15 14  OK)       drop .s  1 2 3 4 5 6 7 8 9 10 11 12 13 15  OK
(  ... 13 15 13  OK)       over .s  1 2 3 4 5 6 7 8 9 10 11 12 13 15 13  OK
(  OK)                         dup  OK
(  E2...)                       .s  E2 Stack overflow (cleared stack)
clearstack  OK
( Stack is empty  OK) .s  Stack is empty  OK
( === test/math.fs ===)  OK
clearstack  OK
( 6  OK)                        3  3 + . 6  OK
( 1  OK)                        6  5 - . 1  OK
( -19  OK)                      1 20 - . -19  OK
( 19  OK)                     -19 -1 * . 19  OK
( 2147483647  OK) hex 7fffffff decimal . 2147483647  OK
( 3FFF0001  OK)        hex 7fff 7fff * . 3FFF0001  OK
( error)                           1 0 /  E12 Divide by 0
( error)                         1 0 mod  E12 Divide by 0
( error)                        1 0 /mod  E12 Divide by 0
( 2  OK)             clearstack 9 4 / .s  2  OK
( 1  OK)           clearstack 9 4 mod .s  1  OK
( 1 2 OK)         clearstack 9 4 /mod .s  1 2  OK
( error)                   hex 1ffffeeee  E6 Overflow: 1ffffeeee
( 0  OK)                  ffffffff 1 + . 0  OK
( 1 OK)                 7fffffff dup * . 1  OK
( FFFFFFFF  OK)         decimal -1 hex . FFFFFFFF  OK
( 0  OK)                      0 negate . 0  OK
( FFFFFFFF  OK)               0 invert . FFFFFFFF  OK
( 1  OK)         decimal -1 hex negate . 1  OK
( 0  OK)         decimal -1 hex invert . 0  OK
( FFFFFFFF  OK)               1 negate . FFFFFFFF  OK
( FFFFFFFE  OK)               1 invert . FFFFFFFE  OK
( FF  OK)           hex ff 0 + . decimal FF  OK
(  E7...)           hex -1 0 + decimal .  E7 [Base=Hex] Unknown word: -1
( -1  OK)               decimal -1 0 + . -1  OK
( * Negative dividends are here to check that division operations have  *)  OK
( * been implemented correctly with the right cdq and idiv instructions *)  OK
( * for the proper width of sign extension. Messing up sign extension   *)  OK
( * during division can raise a floating-point exception, so I want to  *)  OK
( * make very sure that won't happen.                                   *)  OK
( -1  OK)                       -9 7 / . -1  OK
( -2  OK)                     -9 7 mod . -2  OK
( -1 -2  OK)               -9 7 /mod . . -1 -2  OK
( === test/colon_defs.fs ===)  OK
(  OK)    : a ;               a  OK
( B  OK)  : b ."  B" ;        b B  OK
(  OK)    : c ( comment) ;    c  OK
( 3  OK)  : d 1 2 * 1 +  . ;  d 3  OK
( error)  :  E10 Expected name
( error)  : e  E18 Expected ;
( error)  : ;  E18 Expected ;
(  OK)       decimal : f -2147483647 -32768 -128 -1 .s ;  OK
(  OK)  hex : g 80000001 ffff8000 ffffff80 ffffffff .s ;  OK
( -2147483647 -32768 -128 -1  OK)   decimal clearstack f  -2147483647 -32768 -128 -1  OK
( -2147483647 -32768 -128 -1  OK)           clearstack g  -2147483647 -32768 -128 -1  OK
(  OK)         decimal : h 2147483647 65535 255 1 0 .s ;  OK
(  OK)                 hex : k 7fffffff ffff ff 1 0 .s ;  OK
(  2147483647 65535 255 1 0  OK)    decimal clearstack h  2147483647 65535 255 1 0  OK
(  2147483647 65535 255 1 0  OK)            clearstack k  2147483647 65535 255 1 0  OK
( I'm a train  OK)           : ðŸš† ."  I'm a train" ;  ðŸš† I'm a train  OK
( --- Test nested function calls ---)  OK
(  OK)       : f0 swap dup . over + ;  OK
(  OK)                : f1 f0 f0 f0 ;  OK
(  OK)       : fib 1 dup f1 f1 f1 . ;  OK
( 1 1 2 3 5 8 13 21 34 55 89  OK) fib 1 1 2 3 5 8 13 21 34 89  OK
clearstack  OK
( --- Test implicit tail call ---)  OK
(  OK) : start 1 .  : continue 2 . 3 . ;  OK
( 1 2 3  OK)                       start 1 2 3  OK
( 2 3  OK)                      continue 2 3  OK
clearstack  OK
( --- Test maxing out return stack ---)  OK
(  OK)  : rs0 0 space : rs1 1 + 42 emit rs1 nop ;  OK
(     nop here stops tail call optimization ^^^ )  OK
( ***************** E21...)        clearstack rs0 ******************  E21 Return stack full
( ***************** E21...)                   rs0 ******************  E21 Return stack full
( ^^ note auto-recovery from full return stack)  OK
(  18 18  OK)                                  .s  18 18  OK
( --- Test tail call optimization ---)  OK
(  OK)   : tc0 0 . ;  : tc1 1 . tc0 ;  OK
( 1 0  OK)             clearstack tc1 1 0  OK
(  OK)       : tc2 0  : tc3 1 + tc3 ;  OK
(       infinite tail recursion ^^^ )  OK
(  E22...)             clearstack tc2  E22 Loop too long
(  174762  OK)                     .s  174762  OK
( === test/loops.fs ===)  OK
clearstack  OK
(  OK)                    : 9down 9 1 - for i . next ;  OK
( 8 7 6 5 4 3 2 1 0  OK)                         9down 8 7 6 5 4 3 2 1 0  OK
(  OK)                  : 9up 9 1 - for 8 i - . next ;  OK
( 0 1 2 3 4 5 6 7 8  OK)                           9up 0 1 2 3 4 5 6 7 8  OK
(  OK)              : 9under 9 1 -  for 0 i - . next ;  OK
( -8 -7 -6 -5 -4 -3 -2 -1 0  OK)                9under -8 -7 -6 -5 -4 -3 -2 -1 0  OK
( === tests/fizzbuzz.fs ===)  OK
( for integers 1..n, print:            )  OK
(  n divisible by 3       -> "Fizz"    )  OK
(  n divisible by 5       -> "Buzz"    )  OK
(  n divisible by both    -> "FizzBuzz")  OK
(  n divisible by neither -> n         )  OK
( for `0=`, `=`, etc, true is 0, false is 0xffffffff)  OK
( `factors` pushes 1 for divisible by 3, 2 for 5, and 3 for 15)  OK
: if-eq-push-1 = invert 1 and ;  OK
: if-1-f  1 = if ."  Fz" endif ;  OK
: if-2-b  2 = if ."  Bz" endif ;  OK
: if-3-fb 3 = if ."  FzBz" endif ;  OK
: if-0-.  0= if . endif ;  OK
: factors dup  3 mod 0= invert 1 and  swap 5 mod 0= invert 2 and  or ;  OK
: fbz-inner dup factors  dup if-1-f  dup if-2-b  dup if-3-fb  if-0-. ;  OK
: n! 60000 ! ;  OK
: n@ 60000 @ ;  OK
: fbz space dup n! 1 - for n@ i - fbz-inner next ;  OK
( 1 2 Fz 4 Bz Fz 7 8 Fz Bz 11 Fz 13 14 FzBz 16  OK) 16 fbz  1 2 Fz 4 Bz Fz 7 8 Fz Bz 11 Fz 13 14 FzBz 16  OK
( === tests/return_stack.fs ===)  OK
(  OK)  : a 1 >r 2 >r 3 >r .ret r> r> r> ;  OK
(  1 2 3  OK)                            a  1 2 3  OK
(  OK)                : broken 1 >r .ret ;  OK
(  E19 Bad address)                 broken  1  E19 Bad address
(   Stack is empty  OK)               .ret  Stack is empty  OK
( >r should not be defined when not compiling)  1 >r  OK
( ------------------------ TODO: also fix this! ^^^)  OK
clearreturn  OK
( ^^^^^^^^^ compensate for the 1 >r above)  OK
( === test/var_const.fs ===)  OK
clearstack  OK
( <number>  OK)               here . 1467  OK
(  E15...)               10000 allot  E15 Heap full
(        This is too big ^^^^^     )  OK
( <same-number>  OK)          here . 1467  OK
(  OK)                       var foo  OK
( <bigger-number>  OK)        here . 1478  OK
(  OK)                      99 foo !  OK
( 99  OK)                    foo @ . 99  OK
( 99  OK)                      foo ? 99  OK
( 99  OK)      : .foo foo @ . ; .foo 99  OK
(  OK)                  20 const bar  OK
( 20  OK)                      bar . 20  OK
( 20  OK)        : .bar bar . ; .bar 20  OK
( E13...)                   30 bar !  E13 Address out of range
(  OK)           var array 1 array !  OK
(  OK)                   2 , 3 , 4 ,  OK
( 1 OK)                      array ? 1  OK
( 2 OK)                  array 4 + ? 2  OK
( 3 OK)                  array 8 + ? 3  OK
( 4 OK)                 array 12 + ? 4  OK
(  OK)     here array - const arrlen  OK
( 16 OK)                    arrlen . 16  OK
( === test/control_flow.fs ===)  OK
clearstack  OK
(  OK) : zero? if ."   Y" else ."   N" endif ." ." ;  OK
(  E1...)                                      zero?  E1 Stack underflow
(  Y.  OK)                                   0 zero?  Y.  OK
(  N.  OK)                                   1 zero?  N.  OK
(  N.  OK)                                  -1 zero?  N.  OK
(  N.  OK)                                  99 zero?  N.  OK
(  OK)       : red space if ."  Blue" endif ."  x" ;  OK
(  Blue  x  OK)                                0 red  Blue x  OK
(  x  OK)                                      1 red  x  OK
