#!/usr/bin/python3
# Copyright (c) 2022 Sam Blenny
# SPDX-License-Identifier: MIT
#
"""
Generate NASM assembly language code for the Markab Vocab 0 dictionary (Voc0).

Struct format is:
label: dd .link                 ; link to previous list entry
       db .nameLen, <name>      ; name of word
       db .tokenLen, <tokens>   ; compiled tokens for action of word
"""

# These are names and long names for words in Markab Forth's core dictionary
# (Voc0). Names are spelled as Forth source code. Long names are spelled out
# similar to traditional Forth pronunciations, using only characters that are
# valid in NASM assembly source code labels. To avoid conflicts with amd64
# instructions (`nop`, `div`, etc.), the Markab source code uses prefixes for
# its token definitions and code labels.
#
# For example: in `%define tMul ...` and `mMul: ...`, the long name is `Mul`
# and the prefixes are `t` (for token definition) and `m` for code label.
#
WORD_LIST = """
nop Nop
next Next
bye Bye
dup Dup
drop Drop
swap Swap
over Over
clearstack ClearStack
.s DotS
." DotQuoteI
( Paren
: Colon
emit Emit
cr CR
space Space
. Dot
+ Plus
- Minus
* Mul
/ Div
mod Mod
/mod DivMod
max Max
min Min
abs Abs
and And
or Or
xor Xor
not Not
< Less
> Greater
= Equal
0< ZeroLess
0= ZeroEqual
hex Hex
decimal Decimal
"""

VOC0_LIST = []
SERIAL = 0
LINK = 0
LABEL = "Voc0Tail"                       # first item gets special label
TD_LIST = []
JT_LIST = []
TOK_NUM = 0
TOK_MEM = []
TOK_LEN = 0

lines = WORD_LIST.strip().split("\n")
for (i,line) in enumerate(lines):
  (name, long_name) = line.strip().split(" ")
  # Add token for this word to jump table
  TD_LIST += [f"%define t{long_name:10} {TOK_NUM:3}"]
  JT_LIST += [f"dd m{long_name:10}  ; {TOK_NUM:2}"]
  TOK_NUM += 1
  # Add this item to the Voc0 dictionary
  quote = "'" if ('"' in name) else '"'  # handle ." specially
  if i == len(lines) - 1:                # last item gets special label
    LABEL = "Voc0Head"
  indent = " " * (len(LABEL)+2)
  token = "t" + long_name                # change long name into token macro
  fmtLink = f"{LABEL}: dd {LINK}"        # link to previous item in list
  fmtName = f"{indent}db {len(name)}, {quote}{name}{quote}"
  fmtToks = f"{indent}db 1, {token}"
  VOC0_LIST += [f"{fmtLink}\n{fmtName}\n{fmtToks}\n{indent}align 16, db 0"]
  SERIAL += 1
  LINK = LABEL
  LABEL = f"Voc0_{SERIAL:03}"

TOKEN_DEFS = "\n".join(TD_LIST)
JUMP_TABLE = "\n".join(JT_LIST)
VOC0 = "\n".join(VOC0_LIST)

TEMPLATE = f"""
; Copyright (c) 2022 Sam Blenny
; SPDX-License-Identifier: MIT
;
; ========================================================================
; === CAUTION! This file is automatically generated. Do not edit here. ===
; ========================================================================

;----------------------------
; VM Instruction token values

{TOKEN_DEFS}


;------------------------------------------------------------------------
; Jump table (list of dword code label addresses, indexed by token value)

align 16, db 0
db "== Jump Table =="

align 16, db 0
JumpTable:
{JUMP_TABLE}

%define JumpTableLen {len(JT_LIST)}


;-------------------------------------------------------------
; Vocab 0 dictionary linked list (Voc0)

align 16, db 0
db "== Voc0 Dict ==="

align 16, db 0
{VOC0}
""".strip()

print(TEMPLATE)
