( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( Markab kernel)

( TODO: make this actually work)

load" mkb_autogen.mkb"  ( load definitions for opcodes, enums, and core vocab)

: here DP h@ ;       ( address for next writable dictionary location)
: curr CURRENT h@ ;  ( address for head of new definitions vocabulary)
: ctxt CONTEXT h@ ;  ( address for head of word searching vocabulary)

: interpret? MODE @ MODE_INT = ;
: compiling? MODE @ MODE_COM = ;
: immediate? MODE @ MODE_IMM = ;

: allot ( bytes -- ) here + DP h! ;

:  , here  ! 1 allot ;   ( store low byte of T at DP)
: h, here h! 2 allot ;   ( store low halfword of T at DP)
: w, here w! 4 allot ;   ( store full word T at DP)

: create ( -- lenth-of-name )
  curr here h,  ( store link to current head of dictionary at DP)
  here          ( remember address where name will begin)
  word          ( copy name from input stream to DP)
  @             ( load string length of name from `word`)
;

: :
  here curr                      ( save dictionary state for rollback)
  create                         ( read name to start dictionary entry)
  0= if{ Current h! DP h! ; }if  ( empty name --> roll back changes)
;

: ;                          ( Return from a word)
  ( TODO: tail call optimizer)
  ASM{ RET }ASM
;

: var create                 ( Add variable to dictionary)
  T_VAR ,                    ( append type=var to dictionary)
  ASM{ U16 }ASM here 3 + h,  ( append code to push parameter address literal)
  ASM{ RET }ASM              ( append return to end code and begin parameter)
  0 w,                       ( append I32 parameter, initialized to 0)
;

: const ( i32 -- )                ( Add constant to dictionary)
  T_CONST ,                       ( append type=const to dictionary)
  ASM{ I32 }ASM w, ASM{ RET }ASM  ( append code to push I32 literal)
;

: if{ ( -- addr ) ASM{ BZ }ASM here ASM{ 0 0 }ASM ;
: }if ( addr -- ) here swap h! ;
: for{ ( -- addr ) ASM{ MTR }ASM here ;
: }for ( addr -- ) ASM{ DRBLT }ASM h, ASM{ RDROP }ASM ;

: hex 16 BASE w! ;
: decimal 10 BASE w! ;
: cr 10 emit ;
: space 32 emit ;

: newline? ( byte -- )      ( test if byte is CR or LF)
  dup 10 = 13 = or
;

: whitespace? ( byte -- )
  dup newline?              ( check for CR or LF)
  over 32 = or swap 9 = or  ( check for space or tab)
;

: readline
  0 >a TIB >b 255 for{           ( loop for maximum of 255 bytes)
    key dup !b+                  ( read stdin byte and store to TIB)
    a+                           ( update count of bytes read)
    newline? if{ rdrop 0 >r }if  ( stop for newline)
  }for a TIBLen !                ( store count of bytes read)
  0 IN !                         ( reset IN)
;

: word ( -- length-of-word )  ( Copy word from input stream to dictionary)
  IN @ >x TIB x + >a x >b     ( source: TIB+IN, b: IN+count)
  255 x - for{                ( loop to skip over leading whitespace)
    @a+ b+ dup whitespace?    ( read byte, increment count)
    0= if{ b- rdrop 0 >r }if  ( stop at first non-whitespace byte)
  }for b IN !                 ( IN = first non-whitespace byte)
  IN @ >x here >y             ( x = IN, y = address of length byte)
  0 ,                         ( store string_length=0 to dictionary)
  x 255 >= if{ drop ; }if     ( stop now if TIB is empty)
  TIB x + >a here >b          ( source: TIB+IN, dest: dictionary)
  255 x - for{                ( loop to copy non-whitespace bytes)
    @a+ dup whitespace?       ( read a byte)
    if{ drop rdrop 0 >r }if   ( stop for whitespace)
    !b+                       ( otherwise, copy it to dictionary)
  }for here y -               ( calculate string length)
  dup y !                     ( patch string length with correct count)
;

( --------------------- )
( String struct format: )
( Byte range   Field    )
(      0       .length  )
(    1:n       .bytes   )
( --------------------- )

: strcmp ( addr addr -- bool )  ( Compare strings, return match as boolean)
  a swap >a swap b swap >b   ( exchange old a & b with addresses in S & T)
  @a @b != if{               ( if length bytes do not match)
    >b >a false ;            (   restore old a & b, then return bool=false)
  }if
  @a+ 1- for{                ( loop over all the bytes)
    @a+ @b+ != if{           (   if bytes do not match)
      >b >a false rdrop ;    (     restore old a & b, then return bool=false)
    }if
  }for true                  ( return bool=true if all bytes matched)
;

( ------------------------- )
( Vocab item struct format: )
( Byte range   Field        )
(    0:1       .link        )
(      2       .name.length )
(    3:n       .name.bytes  )
(      n       .type        )
(  n+1:n+m     .code/.param )
( ------------------------- )

: v_find ( voc -- [addr] bool)  ( Search for word at DP in vocabulary at T)
  >x
  999 for{                 ( loop over up to 999 dictionary entries)
    x 0= if{               ( if vocab item pointer is null:)
      false rdrop ;        (   return bool=false)
    }if x 2 +              ( calculate address of vocab item's name field)
    here strcmp            ( compare vocab item's name with search word)
    if{                    ( if they match:)
      x 2 + dup @ +        (   calculate address of vocab item .type field)
      true rdrop ;         (   return: addr=.type bool=true )
    }if x h@ >x            ( else: follow link)
  }for
;

: find ( -- [addr] bool )  ( Search for word at DP in CORE_V and EXT_V)
  CORE_V h@ v_find if{     ( if word matches name of core vocab item:)          
    true ;                 (   return: addr bool=true)
  }if EXT_V h@ v_find      ( else: try the extensible vocab)
;

: number ( word -- bool )
;

: inner
;

: .dp here >a @a+ for{ @a+ emit }for ;  ( print word from DP)

: dowords
  word 0= if{ ."  OK" cr ; }if
  find if{ inner dowords ; }if
  number 0= if{ ." ERR: word not found:" .dp reset cr ; }if
;

: outer readline dowords outer ;
