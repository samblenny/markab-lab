( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
07 const HashA
08 const HashB
95bf const HashC
40 const HashBins
3f const HashMask


( CPU opcodes)
03 const JMP
04 const JAL
05 const RET
06 const BZ
07 const BFOR
08 const U8
09 const U16
0a const I32
10 const MTR
32 const RDROP

( Core word definitions)
00 opcode nop
01 opcode reset
02 opcode clerr
0b opcode tron
0c opcode troff
0d opcode dump
0e opcode key
0f opcode iorh
10 opcode >r
11 opcode r
12 opcode call
13 opcode pc
14 opcode err
15 opcode @
16 opcode !
17 opcode h@
18 opcode h!
19 opcode w@
1a opcode w!
1b opcode +
1c opcode -
1d opcode *
1e opcode /
1f opcode %
20 opcode <<
21 opcode >>
22 opcode >>>
23 opcode inv
24 opcode xor
25 opcode or
26 opcode and
27 opcode >
28 opcode <
29 opcode =
2a opcode !=
2b opcode 0=
2c opcode 1+
2d opcode 1-
2e opcode emit
2f opcode .
30 opcode iodh
31 opcode iod
32 opcode rdrop
33 opcode drop
34 opcode dup
35 opcode over
36 opcode swap
37 opcode >a
38 opcode @a
39 opcode @a+
3a opcode a+
3b opcode a-
3c opcode a
3d opcode >b
3e opcode @b
3f opcode @b+
40 opcode !b+
41 opcode b+
42 opcode b-
43 opcode b
44 opcode true
45 opcode false

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CONTEXT
E10C const CURRENT
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
