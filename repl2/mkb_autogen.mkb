( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
07 const HashA
08 const HashB
95bf const HashC
40 const HashBins
3f const HashMask


( CPU opcodes)
03 const JMP
04 const JAL
05 const RET
06 const BZ
07 const BFOR
08 const U8
09 const U16
0a const I32
13 const MTR
35 const RDROP

( Core word definitions)
00 opcode nop
01 opcode reset
02 opcode clerr
0b opcode halt
0c opcode tron
0d opcode troff
0e opcode dump
0f opcode key
10 opcode iorh
11 opcode load
12 opcode save
13 opcode >r
14 opcode r
15 opcode call
16 opcode pc
17 opcode err
18 opcode @
19 opcode !
1a opcode h@
1b opcode h!
1c opcode w@
1d opcode w!
1e opcode +
1f opcode -
20 opcode *
21 opcode /
22 opcode %
23 opcode <<
24 opcode >>
25 opcode >>>
26 opcode inv
27 opcode xor
28 opcode or
29 opcode and
2a opcode >
2b opcode <
2c opcode =
2d opcode !=
2e opcode 0=
2f opcode 1+
30 opcode 1-
31 opcode emit
32 opcode .
33 opcode iodh
34 opcode iod
35 opcode rdrop
36 opcode drop
37 opcode dup
38 opcode over
39 opcode swap
3a opcode >a
3b opcode @a
3c opcode @a+
3d opcode a+
3e opcode a-
3f opcode a
40 opcode >b
41 opcode @b
42 opcode @b+
43 opcode !b+
44 opcode b+
45 opcode b-
46 opcode b
47 opcode true
48 opcode false

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CORE_V
E10C const EXT_V
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E128 const LASTWORD
E12C const IRQRX
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
