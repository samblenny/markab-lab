( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
0b const ErrUnknown
0c const ErrNest
07 const HashA
08 const HashB
95bf const HashC
40 const HashBins
3f const HashMask


( CPU opcodes)
02 const JMP
03 const JAL
04 const RET
05 const BZ
06 const BFOR
07 const U8
08 const U16
09 const I32
12 const MTR
34 const RDROP

( Core word definitions)
00 opcode nop
01 opcode reset
0a opcode halt
0b opcode tron
0c opcode troff
0d opcode dump
0e opcode key
0f opcode iorh
10 opcode load
11 opcode save
12 opcode >r
13 opcode r
14 opcode call
15 opcode pc
16 opcode >err
17 opcode @
18 opcode !
19 opcode h@
1a opcode h!
1b opcode w@
1c opcode w!
1d opcode +
1e opcode -
1f opcode *
20 opcode /
21 opcode %
22 opcode <<
23 opcode >>
24 opcode >>>
25 opcode inv
26 opcode xor
27 opcode or
28 opcode and
29 opcode >
2a opcode <
2b opcode =
2c opcode !=
2d opcode 0=
2e opcode 1+
2f opcode 1-
30 opcode emit
31 opcode .
32 opcode iodh
33 opcode iod
34 opcode rdrop
35 opcode drop
36 opcode dup
37 opcode over
38 opcode swap
39 opcode >a
3a opcode @a
3b opcode @a+
3c opcode a+
3d opcode a-
3e opcode a
3f opcode >b
40 opcode @b
41 opcode @b+
42 opcode !b+
43 opcode b+
44 opcode b-
45 opcode b
46 opcode true
47 opcode false

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CORE_V
E10C const EXT_V
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E128 const LASTWORD
E12C const IRQRX
E130 const OK_EN
E134 const LOADNEST
E138 const IRQERR
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
