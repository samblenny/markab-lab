( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
02 const MODE_IMM


( CPU opcodes)
16 const MTR
1a const RDROP
43 const JMP
44 const JAL
45 const RET
46 const BZ
47 const BFOR
48 const U8
49 const U16
4a const I32

( Core word definitions)
00 opcode nop
01 opcode +
02 opcode -
03 opcode 1+
04 opcode 1-
05 opcode *
06 opcode and
07 opcode inv
08 opcode or
09 opcode xor
0a opcode <<
0b opcode >>
0c opcode >>>
0d opcode =
0e opcode >
0f opcode <
10 opcode !=
11 opcode 0=
12 opcode true
13 opcode false
14 opcode call
15 opcode r>
16 opcode >r
17 opcode r
18 opcode pc
19 opcode err
1a opcode rdrop
1b opcode drop
1c opcode dup
1d opcode over
1e opcode swap
1f opcode @
20 opcode !
21 opcode h@
22 opcode h!
23 opcode w@
24 opcode w!
25 opcode reset
26 opcode fence
27 opcode clerr
28 opcode iod
29 opcode ior
2a opcode iodh
2b opcode iorh
2c opcode key
2d opcode emit
2e opcode .
2f opcode dump
30 opcode tron
31 opcode troff
32 opcode >a
33 opcode @a
34 opcode @a+
35 opcode a+
36 opcode a-
37 opcode a
38 opcode >b
39 opcode @b
3a opcode @b+
3b opcode !b+
3c opcode b+
3d opcode b-
3e opcode b
3f opcode >x
40 opcode x
41 opcode >y
42 opcode y

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CONTEXT
E10C const CURRENT
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
