( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
07 const HashA
08 const HashB
95bf const HashC
40 const HashBins
3f const HashMask


( CPU opcodes)
03 const JMP
04 const JAL
05 const RET
06 const BZ
07 const BFOR
08 const U8
09 const U16
0a const I32
11 const MTR
33 const RDROP

( Core word definitions)
00 opcode nop
01 opcode reset
02 opcode clerr
0b opcode halt
0c opcode tron
0d opcode troff
0e opcode dump
0f opcode key
10 opcode iorh
11 opcode >r
12 opcode r
13 opcode call
14 opcode pc
15 opcode err
16 opcode @
17 opcode !
18 opcode h@
19 opcode h!
1a opcode w@
1b opcode w!
1c opcode +
1d opcode -
1e opcode *
1f opcode /
20 opcode %
21 opcode <<
22 opcode >>
23 opcode >>>
24 opcode inv
25 opcode xor
26 opcode or
27 opcode and
28 opcode >
29 opcode <
2a opcode =
2b opcode !=
2c opcode 0=
2d opcode 1+
2e opcode 1-
2f opcode emit
30 opcode .
31 opcode iodh
32 opcode iod
33 opcode rdrop
34 opcode drop
35 opcode dup
36 opcode over
37 opcode swap
38 opcode >a
39 opcode @a
3a opcode @a+
3b opcode a+
3c opcode a-
3d opcode a
3e opcode >b
3f opcode @b
40 opcode @b+
41 opcode !b+
42 opcode b+
43 opcode b-
44 opcode b
45 opcode true
46 opcode false

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CORE_V
E10C const EXT_V
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E128 const LASTWORD
E12C const IRQRX
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
