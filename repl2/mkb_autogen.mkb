( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( === THIS FILE IS AUTOMATICALLY GENERATED ===)
( ===        DO NOT MAKE EDITS HERE        ===)
( ===      See codegen.py for details      ===)

hex

( Enum codes)
00 const T_VAR
01 const T_CONST
02 const T_OP
03 const T_OBJ
04 const T_IMM
00 const MODE_INT
01 const MODE_COM
02 const MODE_IMM


( CPU opcodes)
04 const JMP
05 const JAL
06 const RET
07 const BZ
08 const BFOR
09 const U8
0a const U16
0b const I32
13 const MTR
33 const RDROP

( Core word definitions)
00 opcode nop
01 opcode reset
02 opcode fence
03 opcode clerr
0c opcode tron
0d opcode troff
0e opcode dump
0f opcode key
10 opcode iorh
11 opcode ior
12 opcode r>
13 opcode >r
14 opcode r
15 opcode call
16 opcode pc
17 opcode err
18 opcode @
19 opcode !
1a opcode h@
1b opcode h!
1c opcode w@
1d opcode w!
1e opcode +
1f opcode -
20 opcode *
21 opcode <<
22 opcode >>
23 opcode >>>
24 opcode inv
25 opcode xor
26 opcode or
27 opcode and
28 opcode >
29 opcode <
2a opcode =
2b opcode !=
2c opcode 0=
2d opcode 1+
2e opcode 1-
2f opcode emit
30 opcode .
31 opcode iodh
32 opcode iod
33 opcode rdrop
34 opcode drop
35 opcode dup
36 opcode over
37 opcode swap
38 opcode >a
39 opcode @a
3a opcode @a+
3b opcode a+
3c opcode a-
3d opcode a
3e opcode >b
3f opcode @b
40 opcode @b+
41 opcode !b+
42 opcode b+
43 opcode b-
44 opcode b
45 opcode true
46 opcode false

( Memory map)
( 0000..00FF belongs to VM)
( 0100..FFFF belongs to kernel)
0000 const Heap
E000 const HeapRes
E0FF const HeapMax
E100 const DP
E104 const IN
E108 const CONTEXT
E10C const CURRENT
E110 const MODE
E118 const LASTCALL
E11C const NEST
E120 const BASE
E124 const EOF
E200 const IB
E300 const Pad
E400 const Fmt
FFFF const MemMax

decimal
