# Copyright (c) 2022 Sam Blenny
# SPDX-License-Identifier: MIT
#
# THIS FILE IS AUTOMATICALLY GENERATED
# DO NOT MAKE EDITS HERE
# See codegen.py for details

# Markab VM opcode constants
NOP    =  0
RESET  =  1
JMP    =  2
JAL    =  3
RET    =  4
BZ     =  5
BFOR   =  6
U8     =  7
U16    =  8
I32    =  9
HALT   = 10
TRON   = 11
TROFF  = 12
IODUMP = 13
IOKEY  = 14
IORH   = 15
IOLOAD = 16
IOSAVE = 17
MTR    = 18
R      = 19
CALL   = 20
PC     = 21
ERR    = 22
MTE    = 23
LB     = 24
SB     = 25
LH     = 26
SH     = 27
LW     = 28
SW     = 29
ADD    = 30
SUB    = 31
MUL    = 32
DIV    = 33
MOD    = 34
SLL    = 35
SRL    = 36
SRA    = 37
INV    = 38
XOR    = 39
OR     = 40
AND    = 41
GT     = 42
LT     = 43
EQ     = 44
NE     = 45
ZE     = 46
INC    = 47
DEC    = 48
IOEMIT = 49
IODOT  = 50
IODH   = 51
IOD    = 52
RDROP  = 53
DROP   = 54
DUP    = 55
OVER   = 56
SWAP   = 57
MTA    = 58
LBA    = 59
LBAI   = 60
AINC   = 61
ADEC   = 62
A      = 63
MTB    = 64
LBB    = 65
LBBI   = 66
SBBI   = 67
BINC   = 68
BDEC   = 69
B      = 70
TRUE   = 71
FALSE  = 72

# Markab VM opcode dictionary
OPCODES = {
    'NOP':     0,
    'RESET':   1,
    'JMP':     2,
    'JAL':     3,
    'RET':     4,
    'BZ':      5,
    'BFOR':    6,
    'U8':      7,
    'U16':     8,
    'I32':     9,
    'HALT':   10,
    'TRON':   11,
    'TROFF':  12,
    'IODUMP': 13,
    'IOKEY':  14,
    'IORH':   15,
    'IOLOAD': 16,
    'IOSAVE': 17,
    'MTR':    18,
    'R':      19,
    'CALL':   20,
    'PC':     21,
    'ERR':    22,
    'MTE':    23,
    'LB':     24,
    'SB':     25,
    'LH':     26,
    'SH':     27,
    'LW':     28,
    'SW':     29,
    'ADD':    30,
    'SUB':    31,
    'MUL':    32,
    'DIV':    33,
    'MOD':    34,
    'SLL':    35,
    'SRL':    36,
    'SRA':    37,
    'INV':    38,
    'XOR':    39,
    'OR':     40,
    'AND':    41,
    'GT':     42,
    'LT':     43,
    'EQ':     44,
    'NE':     45,
    'ZE':     46,
    'INC':    47,
    'DEC':    48,
    'IOEMIT': 49,
    'IODOT':  50,
    'IODH':   51,
    'IOD':    52,
    'RDROP':  53,
    'DROP':   54,
    'DUP':    55,
    'OVER':   56,
    'SWAP':   57,
    'MTA':    58,
    'LBA':    59,
    'LBAI':   60,
    'AINC':   61,
    'ADEC':   62,
    'A':      63,
    'MTB':    64,
    'LBB':    65,
    'LBBI':   66,
    'SBBI':   67,
    'BINC':   68,
    'BDEC':   69,
    'B':      70,
    'TRUE':   71,
    'FALSE':  72,
}

# Markab VM memory map
Heap    = 0x0000
HeapRes = 0xE000
HeapMax = 0xE0FF
DP      = 0xE100
IN      = 0xE104
CORE_V  = 0xE108
EXT_V   = 0xE10C
MODE    = 0xE110
LASTCALL = 0xE118
NEST    = 0xE11C
BASE    = 0xE120
EOF     = 0xE124
LASTWORD = 0xE128
IRQRX   = 0xE12C
OK_EN   = 0xE130
LOADNEST = 0xE134
IRQERR  = 0xE138
IB      = 0xE200
Pad     = 0xE300
Fmt     = 0xE400
MemMax  = 0xFFFF

# Markab language enum codes
T_VAR   = 0
T_CONST = 1
T_OP    = 2
T_OBJ   = 3
T_IMM   = 4
MODE_INT = 0
MODE_COM = 1
ErrUnknown = 11
ErrNest = 12
HashA   = 7
HashB   = 8
HashC   = 38335
HashBins = 64
HashMask = 63

# Markab language core vocabulary
CORE_VOC = {
    'Heap':     (T_CONST, 0x0000),
    'HeapRes':  (T_CONST, 0xE000),
    'HeapMax':  (T_CONST, 0xE0FF),
    'DP':       (T_CONST, 0xE100),
    'IN':       (T_CONST, 0xE104),
    'CORE_V':   (T_CONST, 0xE108),
    'EXT_V':    (T_CONST, 0xE10C),
    'MODE':     (T_CONST, 0xE110),
    'LASTCALL': (T_CONST, 0xE118),
    'NEST':     (T_CONST, 0xE11C),
    'BASE':     (T_CONST, 0xE120),
    'EOF':      (T_CONST, 0xE124),
    'LASTWORD': (T_CONST, 0xE128),
    'IRQRX':    (T_CONST, 0xE12C),
    'OK_EN':    (T_CONST, 0xE130),
    'LOADNEST': (T_CONST, 0xE134),
    'IRQERR':   (T_CONST, 0xE138),
    'IB':       (T_CONST, 0xE200),
    'Pad':      (T_CONST, 0xE300),
    'Fmt':      (T_CONST, 0xE400),
    'MemMax':   (T_CONST, 0xFFFF),
    'T_VAR':    (T_CONST, 0),
    'T_CONST':  (T_CONST, 1),
    'T_OP':     (T_CONST, 2),
    'T_OBJ':    (T_CONST, 3),
    'T_IMM':    (T_CONST, 4),
    'MODE_INT': (T_CONST, 0),
    'MODE_COM': (T_CONST, 1),
    'ErrUnknown': (T_CONST, 11),
    'ErrNest':  (T_CONST, 12),
    'HashA':    (T_CONST, 7),
    'HashB':    (T_CONST, 8),
    'HashC':    (T_CONST, 38335),
    'HashBins': (T_CONST, 64),
    'HashMask': (T_CONST, 63),
    'nop':      (T_OP,    NOP),
    'reset':    (T_OP,    RESET),
    'halt':     (T_OP,    HALT),
    'tron':     (T_OP,    TRON),
    'troff':    (T_OP,    TROFF),
    'dump':     (T_OP,    IODUMP),
    'key':      (T_OP,    IOKEY),
    'iorh':     (T_OP,    IORH),
    'load':     (T_OP,    IOLOAD),
    'save':     (T_OP,    IOSAVE),
    '>r':       (T_OP,    MTR),
    'r':        (T_OP,    R),
    'call':     (T_OP,    CALL),
    'pc':       (T_OP,    PC),
    'err':      (T_OP,    ERR),
    '>err':     (T_OP,    MTE),
    '@':        (T_OP,    LB),
    '!':        (T_OP,    SB),
    'h@':       (T_OP,    LH),
    'h!':       (T_OP,    SH),
    'w@':       (T_OP,    LW),
    'w!':       (T_OP,    SW),
    '+':        (T_OP,    ADD),
    '-':        (T_OP,    SUB),
    '*':        (T_OP,    MUL),
    '/':        (T_OP,    DIV),
    '%':        (T_OP,    MOD),
    '<<':       (T_OP,    SLL),
    '>>':       (T_OP,    SRL),
    '>>>':      (T_OP,    SRA),
    'inv':      (T_OP,    INV),
    'xor':      (T_OP,    XOR),
    'or':       (T_OP,    OR),
    'and':      (T_OP,    AND),
    '>':        (T_OP,    GT),
    '<':        (T_OP,    LT),
    '=':        (T_OP,    EQ),
    '!=':       (T_OP,    NE),
    '0=':       (T_OP,    ZE),
    '1+':       (T_OP,    INC),
    '1-':       (T_OP,    DEC),
    'emit':     (T_OP,    IOEMIT),
    '.':        (T_OP,    IODOT),
    'iodh':     (T_OP,    IODH),
    'iod':      (T_OP,    IOD),
    'rdrop':    (T_OP,    RDROP),
    'drop':     (T_OP,    DROP),
    'dup':      (T_OP,    DUP),
    'over':     (T_OP,    OVER),
    'swap':     (T_OP,    SWAP),
    '>a':       (T_OP,    MTA),
    '@a':       (T_OP,    LBA),
    '@a+':      (T_OP,    LBAI),
    'a+':       (T_OP,    AINC),
    'a-':       (T_OP,    ADEC),
    'a':        (T_OP,    A),
    '>b':       (T_OP,    MTB),
    '@b':       (T_OP,    LBB),
    '@b+':      (T_OP,    LBBI),
    '!b+':      (T_OP,    SBBI),
    'b+':       (T_OP,    BINC),
    'b-':       (T_OP,    BDEC),
    'b':        (T_OP,    B),
    'true':     (T_OP,    TRUE),
    'false':    (T_OP,    FALSE),
}
