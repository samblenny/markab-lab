# Copyright (c) 2022 Sam Blenny
# SPDX-License-Identifier: MIT
#
# THIS FILE IS AUTOMATICALLY GENERATED
# DO NOT MAKE EDITS HERE
# See codegen.py for details

# Markab VM opcode constants
NOP    =  0
RESET  =  1
CLERR  =  2
JMP    =  3
JAL    =  4
RET    =  5
BZ     =  6
BFOR   =  7
U8     =  8
U16    =  9
I32    = 10
HALT   = 11
TRON   = 12
TROFF  = 13
IODUMP = 14
IOKEY  = 15
IORH   = 16
MTR    = 17
R      = 18
CALL   = 19
PC     = 20
ERR    = 21
LB     = 22
SB     = 23
LH     = 24
SH     = 25
LW     = 26
SW     = 27
ADD    = 28
SUB    = 29
MUL    = 30
DIV    = 31
MOD    = 32
SLL    = 33
SRL    = 34
SRA    = 35
INV    = 36
XOR    = 37
OR     = 38
AND    = 39
GT     = 40
LT     = 41
EQ     = 42
NE     = 43
ZE     = 44
INC    = 45
DEC    = 46
IOEMIT = 47
IODOT  = 48
IODH   = 49
IOD    = 50
RDROP  = 51
DROP   = 52
DUP    = 53
OVER   = 54
SWAP   = 55
MTA    = 56
LBA    = 57
LBAI   = 58
AINC   = 59
ADEC   = 60
A      = 61
MTB    = 62
LBB    = 63
LBBI   = 64
SBBI   = 65
BINC   = 66
BDEC   = 67
B      = 68
TRUE   = 69
FALSE  = 70

# Markab VM opcode dictionary
OPCODES = {
    'NOP':     0,
    'RESET':   1,
    'CLERR':   2,
    'JMP':     3,
    'JAL':     4,
    'RET':     5,
    'BZ':      6,
    'BFOR':    7,
    'U8':      8,
    'U16':     9,
    'I32':    10,
    'HALT':   11,
    'TRON':   12,
    'TROFF':  13,
    'IODUMP': 14,
    'IOKEY':  15,
    'IORH':   16,
    'MTR':    17,
    'R':      18,
    'CALL':   19,
    'PC':     20,
    'ERR':    21,
    'LB':     22,
    'SB':     23,
    'LH':     24,
    'SH':     25,
    'LW':     26,
    'SW':     27,
    'ADD':    28,
    'SUB':    29,
    'MUL':    30,
    'DIV':    31,
    'MOD':    32,
    'SLL':    33,
    'SRL':    34,
    'SRA':    35,
    'INV':    36,
    'XOR':    37,
    'OR':     38,
    'AND':    39,
    'GT':     40,
    'LT':     41,
    'EQ':     42,
    'NE':     43,
    'ZE':     44,
    'INC':    45,
    'DEC':    46,
    'IOEMIT': 47,
    'IODOT':  48,
    'IODH':   49,
    'IOD':    50,
    'RDROP':  51,
    'DROP':   52,
    'DUP':    53,
    'OVER':   54,
    'SWAP':   55,
    'MTA':    56,
    'LBA':    57,
    'LBAI':   58,
    'AINC':   59,
    'ADEC':   60,
    'A':      61,
    'MTB':    62,
    'LBB':    63,
    'LBBI':   64,
    'SBBI':   65,
    'BINC':   66,
    'BDEC':   67,
    'B':      68,
    'TRUE':   69,
    'FALSE':  70,
}

# Markab VM memory map
Heap    = 0x0000
HeapRes = 0xE000
HeapMax = 0xE0FF
DP      = 0xE100
IN      = 0xE104
CORE_V  = 0xE108
EXT_V   = 0xE10C
MODE    = 0xE110
LASTCALL = 0xE118
NEST    = 0xE11C
BASE    = 0xE120
EOF     = 0xE124
LASTWORD = 0xE128
IRQRX   = 0xE12C
IB      = 0xE200
Pad     = 0xE300
Fmt     = 0xE400
MemMax  = 0xFFFF

# Markab language enum codes
T_VAR   = 0
T_CONST = 1
T_OP    = 2
T_OBJ   = 3
T_IMM   = 4
MODE_INT = 0
MODE_COM = 1
HashA   = 7
HashB   = 8
HashC   = 38335
HashBins = 64
HashMask = 63

# Markab language core vocabulary
CORE_VOC = {
    'Heap':     (T_CONST, 0x0000),
    'HeapRes':  (T_CONST, 0xE000),
    'HeapMax':  (T_CONST, 0xE0FF),
    'DP':       (T_CONST, 0xE100),
    'IN':       (T_CONST, 0xE104),
    'CORE_V':   (T_CONST, 0xE108),
    'EXT_V':    (T_CONST, 0xE10C),
    'MODE':     (T_CONST, 0xE110),
    'LASTCALL': (T_CONST, 0xE118),
    'NEST':     (T_CONST, 0xE11C),
    'BASE':     (T_CONST, 0xE120),
    'EOF':      (T_CONST, 0xE124),
    'LASTWORD': (T_CONST, 0xE128),
    'IRQRX':    (T_CONST, 0xE12C),
    'IB':       (T_CONST, 0xE200),
    'Pad':      (T_CONST, 0xE300),
    'Fmt':      (T_CONST, 0xE400),
    'MemMax':   (T_CONST, 0xFFFF),
    'T_VAR':    (T_CONST, 0),
    'T_CONST':  (T_CONST, 1),
    'T_OP':     (T_CONST, 2),
    'T_OBJ':    (T_CONST, 3),
    'T_IMM':    (T_CONST, 4),
    'MODE_INT': (T_CONST, 0),
    'MODE_COM': (T_CONST, 1),
    'HashA':    (T_CONST, 7),
    'HashB':    (T_CONST, 8),
    'HashC':    (T_CONST, 38335),
    'HashBins': (T_CONST, 64),
    'HashMask': (T_CONST, 63),
    'nop':      (T_OP,    NOP),
    'reset':    (T_OP,    RESET),
    'clerr':    (T_OP,    CLERR),
    'halt':     (T_OP,    HALT),
    'tron':     (T_OP,    TRON),
    'troff':    (T_OP,    TROFF),
    'dump':     (T_OP,    IODUMP),
    'key':      (T_OP,    IOKEY),
    'iorh':     (T_OP,    IORH),
    '>r':       (T_OP,    MTR),
    'r':        (T_OP,    R),
    'call':     (T_OP,    CALL),
    'pc':       (T_OP,    PC),
    'err':      (T_OP,    ERR),
    '@':        (T_OP,    LB),
    '!':        (T_OP,    SB),
    'h@':       (T_OP,    LH),
    'h!':       (T_OP,    SH),
    'w@':       (T_OP,    LW),
    'w!':       (T_OP,    SW),
    '+':        (T_OP,    ADD),
    '-':        (T_OP,    SUB),
    '*':        (T_OP,    MUL),
    '/':        (T_OP,    DIV),
    '%':        (T_OP,    MOD),
    '<<':       (T_OP,    SLL),
    '>>':       (T_OP,    SRL),
    '>>>':      (T_OP,    SRA),
    'inv':      (T_OP,    INV),
    'xor':      (T_OP,    XOR),
    'or':       (T_OP,    OR),
    'and':      (T_OP,    AND),
    '>':        (T_OP,    GT),
    '<':        (T_OP,    LT),
    '=':        (T_OP,    EQ),
    '!=':       (T_OP,    NE),
    '0=':       (T_OP,    ZE),
    '1+':       (T_OP,    INC),
    '1-':       (T_OP,    DEC),
    'emit':     (T_OP,    IOEMIT),
    '.':        (T_OP,    IODOT),
    'iodh':     (T_OP,    IODH),
    'iod':      (T_OP,    IOD),
    'rdrop':    (T_OP,    RDROP),
    'drop':     (T_OP,    DROP),
    'dup':      (T_OP,    DUP),
    'over':     (T_OP,    OVER),
    'swap':     (T_OP,    SWAP),
    '>a':       (T_OP,    MTA),
    '@a':       (T_OP,    LBA),
    '@a+':      (T_OP,    LBAI),
    'a+':       (T_OP,    AINC),
    'a-':       (T_OP,    ADEC),
    'a':        (T_OP,    A),
    '>b':       (T_OP,    MTB),
    '@b':       (T_OP,    LBB),
    '@b+':      (T_OP,    LBBI),
    '!b+':      (T_OP,    SBBI),
    'b+':       (T_OP,    BINC),
    'b-':       (T_OP,    BDEC),
    'b':        (T_OP,    B),
    'true':     (T_OP,    TRUE),
    'false':    (T_OP,    FALSE),
}
