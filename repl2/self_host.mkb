( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)
( This is a script to do a self-hosted compile of the Markab kernel.        )
( Goal is to exactly match output of bootstrap compiler.                    )
( NOTES:                                                                    )
( 1. Between `load kernel.mkb` and the final `fwrite` to write the kernel   )
(    dictionary to the rom file, defining any words or strings would make a )
(    mess in the kernel dictionary. So, the code for writing the bootloader )
(    must be careful not to change the dictionary.                          )
( 2. Because the bootloader code is being interpreted word by word, it is   )
(    not safe to use `>a`, `a`, `>b`, `b`, `!b+`, and such. The values of A )
(    and B registers will get corrupted by `find` as it looks up words.     )

( Compile kernel into the extensible dictionary)
load kernel.mkb

( Build bootloader in Scratch buffer:)
(  Bytes  Literals and Opcodes                  )
(  0..6   U16 <CORE_V-init-value> U16 CORE_V SH )
(  7..13  U16 <DP-init-value>     U16 DP     SH )
( 14..20  U16 <IRQRX-init-value>  U16 IRQRX  SH )
( 21..27  U16 <IRQERR-init-value> U16 IRQERR SH )
( 28..30  JMP <boot-address>                    )

( Initialize CORE_V to the byte following bootloader: 31)
( The `' h! drop 1+ @` stuff is retrieving bytecode for SH opcode)
U16             Scratch     !
31              Scratch 1 + h!
U16             Scratch 3 + !
CORE_V          Scratch 4 + h!
' h! drop 1+ @  Scratch 6 + !

( Initialize DP to address of byte following bootloader + kernel dictionary)
U16               Scratch  7 + !
here extv - 31 +  Scratch  8 + h!
U16               Scratch 10 + !
DP                Scratch 11 + h!
' h! drop 1+ @    Scratch 13 + !

( Initialize IRQRX with `' outer`)
( The address is 16-bit relative as needed for use with JMP)
U16                Scratch 14 + !
' outer drop 1+ @                  ( get absolute ext. vocab code address)
  extv - 31 +      Scratch 15 + h! ( rebase for core vocab and store address)
U16                Scratch 17 + !
IRQRX              Scratch 18 + h!
' h! drop 1+ @     Scratch 20 + !

( Initialize IRQERR with `' irqerr`)
( The address is 16-bit relative as needed for use with JMP)
U16                 Scratch 21 + !
' irqerr drop 1+ @                  ( get absolute ext. vocab code address)
  extv - 31 +       Scratch 22 + h! ( rebase for core vocab and store address)
U16                 Scratch 24 + !
IRQRX               Scratch 25 + h!
' h! drop 1+ @      Scratch 27 + !

( Jump to `boot`)
JMP                 Scratch 28 + !
' boot drop 1+ @                    ( get absolute ext. vocab code address)
  extv - 31 +       Scratch 29 + h! ( rebase for core vocab and store address)


( Open rom file for writing, replacing its old data, if there was any)
fopen self_hosted.rom
0 fseek drop ( don't check actual seek position, just assume seek worked)
ftrunc

( Write bootloader to rom file)
Scratch
31
fwrite ( leave number of bytes written on the stack for later)

( Write kernel dictionary to rom file and close file)
extv         ( source address)
here over -  ( number of bytes to write)
fwrite       ( leave number of bytes written on the stack for later)
fclose

( Now it's okay to compile strings into the dictionary)
swap
cr "   Wrote" print . "  bootloader bytes" print cr
"   Wrote" print . "  core vocab bytes" print cr
