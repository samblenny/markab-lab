( Copyright Â© 2022 Sam Blenny)  OK
( SPDX-License-Identifier: MIT)  OK
  OK
: 2d drop drop ;  OK
: 4d 2d 2d ;  OK
: t01 3 for{ r 1 and }for iod ;      t01  (  1 0 1 0  OK)  1 0 1 0  OK
4d  OK
: t02 true  if{ 4 iod ; }if 5 iod ;   t02       (  4  OK)  4  OK
drop  OK
: t03 false if{ 4 iod ; }if 5 iod ;   t03       (  5  OK)  5  OK
drop  OK
iod                                (  Stack is empty  OK)  Stack is empty  OK
23 const t04 iod                   (  Stack is empty  OK)  Stack is empty  OK
var t05 5 t05 ! iod                (  Stack is empty  OK)  Stack is empty  OK
0 opcode nop iod                   (  Stack is empty  OK)  Stack is empty  OK
"   t06: a string" print            (  t06: a string  OK)  t06: a string  OK
: t07 "   another one" print ; t07     (  another one OK)  another one  OK
" foo" const t08  " foo" t08 strcmp .           ( -1  OK) -1  OK
" bar" const t09  t08 t09 strcmp .               ( 0  OK) 0  OK
: foo? t08 here word strcmp . ;  foo? foo       ( -1  OK) -1  OK
load" test/load_test.mkb"                      ( t10  OK) t10  OK
( t11: Malformed if-block)  OK
: t11 ( missing T=addr from if{ )  }if ;        (  ERR 2)  ERR 2
( fake if{ addr: ) 9000  OK
: t11 ( pops fake addr->) }if ;                (  ERR 12)  ERR 12
nop                                                (  OK)  OK
( t12: Compiling/OK prompts during compile)  OK
: t12 true if{                              (  Compiling)  Compiling
    ;                                       (  Compiling)  Compiling
  }if                                       (  Compiling)  Compiling
;                                                  (  OK)  OK
( t13: Unknown word during load)  OK
load" test/load_t13.mkb"         (  ? not-a-name  ERR 11)  ? not-a-name  ERR 11
test/load_t13.mkb:2: : t13 not-a-name ;  ERR 15
nop                                                (  OK)  OK
LOADNEST? .                                      ( 0  OK) 0  OK
( t14: Attempted infinite load" recursion)  OK
load" test/load_t14.mkb"                       (  ERR 13)  ERR 13
test/load_t14.mkb:2: load" test/load_t14.mkb"  ERR 15
test/load_t14.mkb:2: load" test/load_t14.mkb"  ERR 15
nop                                                (  OK)  OK
LOADNEST? .                                      ( 0  OK) 0  OK
( t15: Attempted infinitely tail-recursive call)  OK
: t15 t15 ;  t15                                (  ERR 8)  ERR 8
nop                                                (  OK)  OK
( t16: Attempted infinitely recursive regular call)  OK
: t16 t16 nop ;  t16                            (  ERR 6)  ERR 6
nop                                                (  OK)  OK
( t17: Attempt to overflow the return stack.    )  OK
(      The juggling of return values is to avoid)  OK
(      git diffs for compiled addresses that can)  OK
(      change each time I modify the kernel code)  OK
: t17  ( n -- )  Compiling
  dup r >a rdrop r >b rdrop cr   ( pop addresses)  Compiling
  ( n) for{ r iorh >r cr }for                 ( )  Compiling
  ( n) for{ r rdrop rdrop iorh >r cr }for     ( )  Compiling
  b >r a >r                  ( restore addresses)  Compiling
;  OK
( n=15 is too much)  OK
15 t17
  f
  f e
  f e d
  f e d c
  f e d c b
  f e d c b a
  f e d c b a 9
  f e d c b a 9 8
  f e d c b a 9 8 7
  f e d c b a 9 8 7 6
  f e d c b a 9 8 7 6 5
  f e d c b a 9 8 7 6 5 4
  f e d c b a 9 8 7 6 5 4 3
  f e d c b a 9 8 7 6 5 4 3 2
  f e d c b a 9 8 7 6 5 4 3 2 1
  f e d c b a 9 8 7 6 5 4 3 2 1 0  ERR 6
( n=14 is okay)  OK
14 t17
  e
  e d
  e d c
  e d c b
  e d c b a
  e d c b a 9
  e d c b a 9 8
  e d c b a 9 8 7
  e d c b a 9 8 7 6
  e d c b a 9 8 7 6 5
  e d c b a 9 8 7 6 5 4
  e d c b a 9 8 7 6 5 4 3
  e d c b a 9 8 7 6 5 4 3 2
  e d c b a 9 8 7 6 5 4 3 2 1
  e d c b a 9 8 7 6 5 4 3 2 1 0
  e d c b a 9 8 7 6 5 4 3 2 1
  e d c b a 9 8 7 6 5 4 3 2
  e d c b a 9 8 7 6 5 4 3
  e d c b a 9 8 7 6 5 4
  e d c b a 9 8 7 6 5
  e d c b a 9 8 7 6
  e d c b a 9 8 7
  e d c b a 9 8
  e d c b a 9
  e d c b a
  e d c b
  e d c
  e d
  e
  R-Stack is empty
  OK
( t18: Find word "star" in the dictionary with  )  OK
(      ' at compile time and strfind at run time)  OK
(      then compare results: should be equal    )  OK
: t18 " star" strfind .  Compiling
  ' star swapi U16i h,i I32i w,i  Compiling
  . = . ;  OK
t18                                       ( -1 -1 -1  OK) -1 -1 -1  OK

