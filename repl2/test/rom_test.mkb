( Copyright Â© 2022 Sam Blenny)
( SPDX-License-Identifier: MIT)

: 2d drop drop ;
: 4d 2d 2d ;
: t01 3 for{ r 1 and }for iod ;      t01  (  1 0 1 0  OK)
4d
: t02 true  if{ 4 iod ; }if 5 iod ;   t02       (  4  OK)
drop
: t03 false if{ 4 iod ; }if 5 iod ;   t03       (  5  OK)
drop
iod                                (  Stack is empty  OK)
23 const t04 iod                   (  Stack is empty  OK)
var t05 5 t05 ! iod                (  Stack is empty  OK)
0 opcode nop iod                   (  Stack is empty  OK)
"   t06: a string" print            (  t06: a string  OK)
: t07 "   another one" print ; t07     (  another one OK)
" foo" const t08  " foo" t08 strcmp .           ( -1  OK)
" bar" const t09  t08 t09 strcmp .               ( 0  OK)
: foo? t08 here word strcmp . ;  foo? foo       ( -1  OK)
( test file loading)
load" test/load_test.mkb"                      ( t10  OK)
load" name_not_on_vm_allow_list"                (  ERR 9)
( test file saving)
(  write some code to a file, then load it back)
" : e emit ; 32 e 83 e 65 e 86 e 69 e " const t10b
t10b 1+ t10b @ save" test/mkb_save.mkb"            (  OK)
load" test/mkb_save.mkb"                      ( SAVE  OK)
(  test source RAM range and filepath checks)
0 hex ffff decimal save" test/mkb_save.rom"        (  OK)
0 0 save" test/mkb_save.rom"                    (  ERR 3)
0 1 save" test/mkb_save.rom"                       (  OK)
0 1 save" name_not_on_vm_allow_list"            (  ERR 9)
( t11: Malformed if-block)
: t11 ( missing T=addr from if{ )  }if ;        (  ERR 2)
( fake if{ addr: ) 9000
: t11 ( pops fake addr->) }if ;                (  ERR 12)
nop                                                (  OK)
( t12: Compiling/OK prompts during compile)
: t12 true if{                              (  Compiling)
    ;                                       (  Compiling)
  }if                                       (  Compiling)
;                                                  (  OK)
( t13: Unknown word during load)
load" test/load_t13.mkb"         (  ? not-a-name  ERR 11)
nop                                                (  OK)
LOADNEST? .                                      ( 0  OK)
( t14: Attempted infinite load" recursion)
load" test/load_t14.mkb"                       (  ERR 13)
nop                                                (  OK)
LOADNEST? .                                      ( 0  OK)
( t15: Attempted infinitely tail-recursive call)
: t15 t15 ;  t15                                (  ERR 8)
nop                                                (  OK)
( t16: Attempted infinitely recursive regular call)
: t16 t16 nop ;  t16                            (  ERR 6)
nop                                                (  OK)
( t17: Attempt to overflow the return stack.    )
(      The juggling of return values is to avoid)
(      git diffs for compiled addresses that can)
(      change each time I modify the kernel code)
: t17  ( n -- )
  dup r >a rdrop r >b rdrop cr   ( pop addresses)
  ( n) for{ r iorh >r cr }for                 ( )
  ( n) for{ r rdrop rdrop iorh >r cr }for     ( )
  b >r a >r                  ( restore addresses)
;
( n=15 is too much)
15 t17
( n=14 is okay)
14 t17
( t18: Find word "star" in the dictionary with  )
(      ' at compile time and strfind at run time)
(      then compare results: should be equal    )
: t18 " star" strfind .
  ' star swapi U16i h,i I32i w,i
  . = . ;
t18                                       ( -1 -1 -1  OK)
