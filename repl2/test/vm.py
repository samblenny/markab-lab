#!/usr/bin/python3
# Copyright (c) 2022 Sam Blenny
# SPDX-License-Identifier: MIT
#

from markab_vm import VM
from tokens import get_token

def p(s):
  print(s, end='')

def test_push_pop():
  v = VM()
  print("=== test.vm.test_push_pop() ===")
  p(".s")
  v._dotS()
  print("( Stack capacity is 18. Trying to push 19th item will clear stack)")
  for i in range(19):
    p(f"{i} ")
    v._push(i)
    p(".s")
    v._dotS()
  print("( This time, the stack won't clear because only 18 items are pushed)")
  for i in range(18):
    p(f"{i} ")
    v._push(i)
    p(".s")
    v._dotS()
  for i in range(19):
    p("drop .s")
    v.drop()
    v._dotS()
  print()

def test_plus_minus():
  v = VM()
  print("=== test.vm.test_plus_minus() ===")
  p("-5 1 2 .s      (  -6 1 2  OK)")
  v._push(-6)
  v._push(1)
  v._push(2)
  v._dotS()
  p("+ .s             (  -6 3  OK)")
  v.plus()
  v._dotS()
  p("+ .s               (  -3  OK)")
  v.plus()
  v._dotS()
  p("drop 7 9 .s       (  7 9  OK)")
  v.drop()
  v._push(7)
  v._push(9)
  v._dotS()
  p("- .s               (  -2  OK)")
  v.minus()
  v._dotS()
  print()

def test_multiply():
  v = VM()
  print("=== test.vm.test_multiply() ===")
  p("3 -1 .s                         (  3 -1  OK)")
  v._push(3)
  v._push(-1)
  v._dotS()
  p("* .s drop                         (  -3  OK)")
  v.mul()
  v._dotS()
  v.drop()
  p("-2 hex .s decimal            ( fffffffe  OK)")
  v._push(-2)
  v._hex()
  v._dotS()
  v._decimal()
  p("dup * .s drop                      (  4  OK)")
  v.dup()
  v.mul()
  v._dotS()
  v.drop()
  p("hex 7fffffff decimal .s   (  2147483647  OK)")
  v._push(0x7fffffff)
  v._dotS()
  p("dup * .s                           (  1  OK)")
  v.dup()
  v.mul()
  v._dotS()
  print()

def test_shift():
  v = VM()
  print("=== test.vm.test_shift() ===")
  p("1 31 .s                   (  1 31  OK)")
  v._push(1)
  v._push(31)
  v._dotS()
  p("<< .s              (  -2147483648  OK)")
  v.shiftLeft()
  v._dotS()
  p("hex .s decimal        (  80000000  OK)")
  v._hex()
  v._dotS()
  v._decimal()
  p("31 >>> decimal .s           (  -1  OK)")
  v._push(31)
  v.shiftRightI32()
  v._decimal()
  v._dotS()
  p("hex .s                (  ffffffff  OK)")
  v._hex()
  v._dotS()
  p("1 >> .s decimal       (  7fffffff  OK)")
  v._push(1)
  v.shiftRightU32()
  v._dotS()
  v._decimal()
  p("decimal .s          (  2147483647  OK)")
  v._decimal()
  v._dotS()
  p("30 >> .s                      ( 1  OK)")
  v._push(30)
  v.shiftRightU32()
  v._dotS()
  p("4 << .s                     (  16  OK)")
  v._push(4)
  v.shiftLeft()
  v._dotS()
  p("2 >> .s                      (  4  OK)")
  v._push(2)
  v.shiftRightU32()
  v._dotS()
  print()

def test_bitwise():
  v = VM()
  print("=== test.vm.test_bitwise() ===")
  print("hex")
  v._hex()
  p("ffffffff 3333 & .s drop       (  3333  OK)")
  v._push(0xffffffff)
  v._push(0x3333)
  v.and_()
  v._dotS()
  v.drop()
  p("55555555 aaaa | .s drop   (  5555ffff  OK)")
  v._push(0x55555555)
  v._push(0xaaaa)
  v.or_()
  v._dotS()
  v.drop()
  p("55555555 ffff ^ .s drop   (  5555aaaa  OK)")
  v._push(0x55555555)
  v._push(0xffff)
  v.xor()
  v._dotS()
  v.drop()
  p("55555555 ~ .s drop        (  aaaaaaaa  OK)")
  v._push(0x55555555)
  v.invert()
  v._dotS()
  v.drop()
  print("decimal")
  v._decimal()
  print()

def test_literals():
  v = VM()
  print("=== test.vm.test_literals() ===")
  p("0 255 .s drop drop          (  0 255  OK)")
  code = bytearray()
  code.extend([get_token('Lit8'), 0])
  code.extend([get_token('Lit8'), 255])
  code.extend([get_token('Return')])
  v._warmBoot(code)
  v._dotS()
  v.drop()
  v.drop()
  p("256 65535 .s drop drop  (  256 65536  OK)")
  code = bytearray()
  code.extend([get_token('Lit16'), 0x00, 0x01])  # 256
  code.extend([get_token('Lit16'), 0xff, 0xff])  # 65535
  code.extend([get_token('Return')])
  v._warmBoot(code)
  v._dotS()
  v.drop()
  v.drop()
  p("65536 -1 .s drop drop    (  65536 -1  OK)")
  code = bytearray()
  code.extend([get_token('Lit32'), 0x00, 0x00, 0x01, 0x00])  # 65536
  code.extend([get_token('Lit32'), 0xff, 0xff, 0xff, 0xff])  # -1
  code.extend([get_token('Return')])
  v._warmBoot(code)
  v._dotS()
  v.drop()
  v.drop()
  print()

def test_store_fetch():
  v = VM()
  print("=== test.vm.test_store_fetch() ===")
  # =====================================================
  print("( fetch words take 1 argument)")
  p("@ .s         (  Stack is empty  ERR2)")
  v.fetch()
  v._dotS()
  p("w@ .s        (  Stack is empty  ERR2)")
  v.wFetch()
  v._dotS()
  p("b@ .s        (  Stack is empty  ERR2)")
  v.bFetch()
  v._dotS()
  print("( store words take 2 arguments)")
  p("9000 ! .s              (  9000  ERR2)")
  v._push(9000)
  v.store()
  v._dotS()
  p("w! .s                  (  9000  ERR2)")
  v.wStore()
  v._dotS()
  p("b! .s                  (  9000  ERR2)")
  v.bStore()
  v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( @ and ! addresses must be >= 0)")
  p("-1 @ .s                  (  -1  ERR3)")
  v._push(-1)
  v.fetch()
  v._dotS()
  p("w@ .s                    (  -1  ERR3)")
  v.wFetch()
  v._dotS()
  p("b@ .s                    (  -1  ERR3)")
  v.bFetch()
  v._dotS()
  p("-1 ! .s               (  -1 -1  ERR3)")
  v._push(-1)
  v.store()
  v._dotS()
  p("w! .s                 (  -1 -1  ERR3)")
  v.wStore()
  v._dotS()
  p("b! .s                 (  -1 -1  ERR3)")
  v.bStore()
  v._dotS()
  print("drop drop  OK")
  v.drop()
  v.drop()
  # =====================================================
  print("( ! address must be <= 0xffff - 3)")
  p("4 65536 ! .s        (  4 65536  ERR3)")
  v._push(4)
  v._push(65536)
  v.store()
  v._dotS()
  for i in range(4):
    (pad, code) = ("     ", "ERR3") if i<3 else ("","OK")
    stk = f"4 {65535-i}" if i<3 else "Stack is empty"
    p(f"1 - ! .s       {pad}(  {stk}  {code})")
    v._push(1)
    v.minus()
    v.store()
    v._dotS()
  # =====================================================
  print("( @ address must be <= 0xffff - 3)")
  p("65536 @ .s            (  65536  ERR3)")
  v._push(65536)
  v.fetch()
  v._dotS()
  for i in range(4):
    (pad, code) = ("", "ERR3") if i<3 else ("      ","OK")
    _t = 65535-i if i<3 else 4
    p(f"1 - @ .s              {pad}(  {_t}  {code})")
    v._push(1)
    v.minus()
    v.fetch()
    v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( w! address must be <= 0xffff - 1)")
  p("2 65536 w! .s       (  2 65536  ERR3)")
  v._push(2)
  v._push(65536)
  v.wStore()
  v._dotS()
  for i in range(2):
    (pad, code) = ("     ", "ERR3") if i<1 else ("","OK")
    stk = f"2 {65535-i}" if i<1 else "Stack is empty"
    p(f"1 - w! .s      {pad}(  {stk}  {code})")
    v._push(1)
    v.minus()
    v.wStore()
    v._dotS()
  # =====================================================
  print("( w@ address must be <= 0xffff - 1)")
  p("65536 w@ .s           (  65536  ERR3)")
  v._push(65536)
  v.wFetch()
  v._dotS()
  for i in range(2):
    (pad, code) = ("", "ERR3") if i<1 else ("      ","OK")
    _t = 65535-i if i<1 else 2
    p(f"1 - w@ .s             {pad}(  {_t}  {code})")
    v._push(1)
    v.minus()
    v.wFetch()
    v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( b! address must be <= 0xffff)")
  p("1 65536 b! .s       (  1 65536  ERR3)")
  v._push(1)
  v._push(65536)
  v.bStore()
  v._dotS()
  p("1 - b! .s      (  Stack is empty  OK)")
  v._push(1)
  v.minus()
  v.bStore()
  v._dotS()
  print("( b@ address must be <= 0xffff)")
  p("65536 b@ .s           (  65536  ERR3)")
  v.drop()
  v._push(65536)
  v.bFetch()
  v._dotS()
  p("1 - b@ .s                   (  1  OK)")
  v._push(1)
  v.minus()
  v.bFetch()
  v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( ! and @ cover full signed int32 range )")
  print("( note: @ does sign extension)")
  p("-1 9000 ! 9000 @               (  -1  OK)")
  v._push(-1)
  v._push(9000)
  v.store()
  v._push(9000)
  v.fetch()
  v._dotS()
  p("1 >> 9000 ! 9000 @ .s  (  2147483647  OK)")
  v._push(1)
  v.shiftRightU32()
  v._push(9000)
  v.store()
  v._push(9000)
  v.fetch()
  v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( w! and w@ clip to unsigned uint16 range)")
  print("( note: w@ does not do sign extension)")
  p("-1 9000 w! 9000 w@          (  65535  OK)")
  v._push(-1)
  v._push(9000)
  v.wStore()
  v._push(9000)
  v.wFetch()
  v._dotS()
  p("1 >> 9000 w! 9000 w@ .s     (  32767  OK)")
  v._push(1)
  v.shiftRightU32()
  v._push(9000)
  v.wStore()
  v._push(9000)
  v.wFetch()
  v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================
  print("( b! and b@ clip to unsigned uint8 range)")
  print("( note: b@ does not do sign extension)")
  p("-1 9000 b! 9000 b@            (  255  OK)")
  v._push(-1)
  v._push(9000)
  v.bStore()
  v._push(9000)
  v.bFetch()
  v._dotS()
  p("1 >> 9000 b! 9000 b@ .s       (  127  OK)")
  v._push(1)
  v.shiftRightU32()
  v._push(9000)
  v.bStore()
  v._push(9000)
  v.bFetch()
  v._dotS()
  print("drop  OK")
  v.drop()
  # =====================================================

test_push_pop()
test_plus_minus()
test_multiply()
test_shift()
test_bitwise()
test_literals()
test_store_fetch()
