=== test.vm.test_push_pop() ===
.s  Stack is empty  OK
( Stack capacity is 18. Trying to push 19th item will clear stack)
0 .s  0  OK
1 .s  0 1  OK
2 .s  0 1 2  OK
3 .s  0 1 2 3  OK
4 .s  0 1 2 3 4  OK
5 .s  0 1 2 3 4 5  OK
6 .s  0 1 2 3 4 5 6  OK
7 .s  0 1 2 3 4 5 6 7  OK
8 .s  0 1 2 3 4 5 6 7 8  OK
9 .s  0 1 2 3 4 5 6 7 8 9  OK
10 .s  0 1 2 3 4 5 6 7 8 9 10  OK
11 .s  0 1 2 3 4 5 6 7 8 9 10 11  OK
12 .s  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
13 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
14 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
15 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
16 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
17 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK
18 .s  Stack is empty  ERR 1
( This time, the stack won't clear because only 18 items are pushed)
0 .s  0  OK
1 .s  0 1  OK
2 .s  0 1 2  OK
3 .s  0 1 2 3  OK
4 .s  0 1 2 3 4  OK
5 .s  0 1 2 3 4 5  OK
6 .s  0 1 2 3 4 5 6  OK
7 .s  0 1 2 3 4 5 6 7  OK
8 .s  0 1 2 3 4 5 6 7 8  OK
9 .s  0 1 2 3 4 5 6 7 8 9  OK
10 .s  0 1 2 3 4 5 6 7 8 9 10  OK
11 .s  0 1 2 3 4 5 6 7 8 9 10 11  OK
12 .s  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
13 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
14 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
15 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
16 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
17 .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10 11  OK
drop .s  0 1 2 3 4 5 6 7 8 9 10  OK
drop .s  0 1 2 3 4 5 6 7 8 9  OK
drop .s  0 1 2 3 4 5 6 7 8  OK
drop .s  0 1 2 3 4 5 6 7  OK
drop .s  0 1 2 3 4 5 6  OK
drop .s  0 1 2 3 4 5  OK
drop .s  0 1 2 3 4  OK
drop .s  0 1 2 3  OK
drop .s  0 1 2  OK
drop .s  0 1  OK
drop .s  0  OK
drop .s  Stack is empty  OK
drop .s  Stack is empty  ERR 2

=== test.vm.test_add_subtract() ===
-5 1 2 .s      (  -6 1 2  OK)  -6 1 2  OK
+ .s             (  -6 3  OK)  -6 3  OK
+ .s               (  -3  OK)  -3  OK
1+ .s              (  -2  OK)  -2  OK
1- .s              (  -3  OK)  -3  OK
drop 7 9 .s       (  7 9  OK)  7 9  OK
- .s               (  -2  OK)  -2  OK

=== test.vm.test_multiply() ===
3 -1 .s                         (  3 -1  OK)  3 -1  OK
* .s drop                         (  -3  OK)  -3  OK
-2 hex .s decimal            ( fffffffe  OK)  fffffffe  OK
dup * .s drop                      (  4  OK)  4  OK
hex 7fffffff decimal .s   (  2147483647  OK)  2147483647  OK
dup * .s                           (  1  OK)  1  OK

=== test.vm.test_shift() ===
1 31 .s                   (  1 31  OK)  1 31  OK
<< .s              (  -2147483648  OK)  -2147483648  OK
hex .s decimal        (  80000000  OK)  80000000  OK
31 >>> decimal .s           (  -1  OK)  -1  OK
hex .s                (  ffffffff  OK)  ffffffff  OK
1 >> .s decimal       (  7fffffff  OK)  7fffffff  OK
decimal .s          (  2147483647  OK)  2147483647  OK
30 >> .s                      ( 1  OK)  1  OK
4 << .s                     (  16  OK)  16  OK
2 >> .s                      (  4  OK)  4  OK

=== test.vm.test_bitwise() ===
hex
ffffffff 3333 and .s drop     (  3333  OK)  3333  OK
55555555 aaaa or .s drop  (  5555ffff  OK)  5555ffff  OK
55555555 ffff xor .s drop (  5555aaaa  OK)  5555aaaa  OK
55555555 inv .s drop      (  aaaaaaaa  OK)  aaaaaaaa  OK
decimal

=== test.vm.test_literals() ===
0 255 .s drop drop          (  0 255  OK)  0 255  OK
256 65535 .s drop drop  (  256 65536  OK)  256 65535  OK
65536 -1 .s drop drop    (  65536 -1  OK)  65536 -1  OK
true false .s reset          (  -1 0  OK)  -1 0  OK

=== test.vm.test_load_store() ===
( fetch words take 1 argument)
w@ .s        (  Stack is empty  ERR 2)  Stack is empty  ERR 2
h@ .s        (  Stack is empty  ERR 2)  Stack is empty  ERR 2
@ .s         (  Stack is empty  ERR 2)  Stack is empty  ERR 2
( store words take 2 arguments)
9000 w! .s             (  9000  ERR 2)  9000  ERR 2
h! .s                  (  9000  ERR 2)  9000  ERR 2
! .s                   (  9000  ERR 2)  9000  ERR 2
drop  OK
( w! and w@ cover full signed int32 range )
( note: w@ does sign extension)
-1 9000 w! 9000 w@               (  -1  OK)  -1  OK
1 >> 9000 w! 9000 w@ .s  (  2147483647  OK)  2147483647  OK
reset  OK
( h! and h@ clip to unsigned uint16 range)
( note: h@ does not do sign extension)
-1 9000 h! 9000 h@          (  65535  OK)  65535  OK
1 >> 9000 h! 9000 h@ .s     (  32767  OK)  32767  OK
reset  OK
( ! and @ clip to unsigned uint8 range)
( note: @ does not do sign extension)
-1 9000 ! 9000 @              (  255  OK)  255  OK
1 >> 9000 ! 9000 @ .s         (  127  OK)  127  OK
reset  OK

=== test.vm.test_return_stack() ===
.s            (  Stack is empty  OK)  Stack is empty  OK
.ret        (  R-Stack is empty  OK)  R-Stack is empty  OK
 1 2 3 .s              (  1 2 3  OK)  1 2 3  OK
>r >r >r .ret          (  3 2 1  OK)  3 2 1  OK
.s            (  Stack is empty  OK)  Stack is empty  OK
rdrop rdrop rdrop .s          (  OK)  Stack is empty  OK
.ret        (  R-Stack is empty  OK)  R-Stack is empty  OK
( attempt to overflow return stack)
( note: overflow auto-resets both stacks)
reset 99 .s                (  99 OK)  99  OK
.ret        (  R-Stack is empty  OK)  R-Stack is empty  OK
0 >r .ret  0  OK
1 >r .ret  0 1  OK
2 >r .ret  0 1 2  OK
3 >r .ret  0 1 2 3  OK
4 >r .ret  0 1 2 3 4  OK
5 >r .ret  0 1 2 3 4 5  OK
6 >r .ret  0 1 2 3 4 5 6  OK
7 >r .ret  0 1 2 3 4 5 6 7  OK
8 >r .ret  0 1 2 3 4 5 6 7 8  OK
9 >r .ret  0 1 2 3 4 5 6 7 8 9  OK
10 >r .ret  0 1 2 3 4 5 6 7 8 9 10  OK
11 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11  OK
12 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
13 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
14 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
15 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
16 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
17 >r .ret  R-Stack is empty  ERR 6
.s             (  Stack is empty OK)  Stack is empty  OK
( attempt to underflow return stack)
reset 99 .s               (  99  OK)  99  OK
0 >r .ret  0  OK
1 >r .ret  0 1  OK
2 >r .ret  0 1 2  OK
3 >r .ret  0 1 2 3  OK
4 >r .ret  0 1 2 3 4  OK
5 >r .ret  0 1 2 3 4 5  OK
6 >r .ret  0 1 2 3 4 5 6  OK
7 >r .ret  0 1 2 3 4 5 6 7  OK
8 >r .ret  0 1 2 3 4 5 6 7 8  OK
9 >r .ret  0 1 2 3 4 5 6 7 8 9  OK
10 >r .ret  0 1 2 3 4 5 6 7 8 9 10  OK
11 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11  OK
12 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
13 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
14 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
15 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
16 >r .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10 11 12 13  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10 11 12  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10 11  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9 10  OK
rdrop .ret  0 1 2 3 4 5 6 7 8 9  OK
rdrop .ret  0 1 2 3 4 5 6 7 8  OK
rdrop .ret  0 1 2 3 4 5 6 7  OK
rdrop .ret  0 1 2 3 4 5 6  OK
rdrop .ret  0 1 2 3 4 5  OK
rdrop .ret  0 1 2 3 4  OK
rdrop .ret  0 1 2 3  OK
rdrop .ret  0 1 2  OK
rdrop .ret  0 1  OK
rdrop .ret  0  OK
rdrop .ret  R-Stack is empty  OK
.s                           (  99  OK)  99  OK
rdrop .ret  (  R-Stack is empty  ERR 7)  R-Stack is empty  ERR 7
.s               (  Stack is empty  OK)  Stack is empty  OK

=== test.vm.test_comparisons() ===
reset 1 2 =   2 2 =   2 1 =   .s   (  0 -1 0  OK)  0 -1 0  OK
reset 1 2 >   2 2 >   2 1 >   .s   (  0 0 -1  OK)  0 0 -1  OK
reset 1 2 <   2 2 <   2 1 <   .s   (  -1 0 0  OK)  -1 0 0  OK
reset 1 2 !=  2 2 !=  2 1 !=  .s  (  -1 0 -1  OK)  -1 0 -1  OK
reset  -1 0=    0 0=    1 0=  .s   (  0 -1 0  OK)  0 -1 0  OK

=== test.vm.test_over_swap() ===
1 2 over .s                         (  1 2 1  OK)  1 2 1  OK
swap .s                             (  1 1 2  OK)  1 1 2  OK

=== test.vm.test_instructions_math_logic() ===
( opcode coverage: NOP ADD SUB INC DEC MUL        )
(    nop    1 dup   + dup    9   - dup   *  .s    )
ASM{ NOP U8 1 DUP ADD DUP U8 9 SUB DUP MUL IOD }ASM
warmboot .s                                 (  2 49  OK)  2 49  OK
reset  OK
( opcode coverage: DIV MOD                        )
(       19    5   /    19    5   % iod            )
ASM{ U8 19 U8 5 DIV U8 19 U8 5 MOD IOD }ASM
warmboot .s                                  (  3 4  OK)  3 4  OK
reset  OK
( opcode coverage: INC DEC    )
(       3  1+    9  1-  .s    )
ASM{ U8 3 INC U8 9 DEC IOD }ASM
warmboot .s                                  (  4 8  OK)  4 8  OK
reset  OK
( opcode coverage: AND INV OR XOR                      )
( equivalent to: hex 55 inv 7f and dup 80 or 0f xor    )
ASM{ U8 85 INV U8 127 AND DUP U8 128 OR U8 15 XOR RET }ASM
warmboot  OK
hex .s decimal                             (  2a a5  OK)  2a a5  OK
reset  OK
( opcode coverage: SLL SRL SRA                         )
( equivalent to: 1 31 << dup 15 >>> dup 16 >>          )
ASM{  RET }ASM
warmboot  OK
hex .s decimal             (  8000000 ffff0000 ffff  OK)  80000000 ffff0000 ffff  OK
reset  OK
( opcode coverage: EQ                                  )
( equivalent to: 1 2 =     2 2 =   2 1 =               )
ASM{ U8 1 U8 2 EQ  U8 2 U8 2 EQ  U8 2 U8 1 EQ  RET }ASM
warmboot .s                               (  0 -1 0  OK)  0 -1 0  OK
reset  OK
( opcode coverage: GT                                  )
( equivalent to: 1 2 >     2 2 >   2 1 >               )
ASM{ U8 1 U8 2 GT  U8 2 U8 2 GT  U8 2 U8 1 GT  RET }ASM
warmboot .s                               (  0 0 -1  OK)  0 0 -1  OK
reset  OK
( opcode coverage: LT                                  )
( equivalent to: 1 2 <     2 2 <   2 1 <               )
ASM{ U8 1 U8 2 LT  U8 2 U8 2 LT  U8 2 U8 1 LT  RET }ASM
warmboot .s                               (  -1 0 0  OK)  -1 0 0  OK
reset  OK
( opcode coverage: NE                                  )
( equivalent to: 1 2 !=    2 2 !=  2 1 !=              )
ASM{ U8 1 U8 2 NE  U8 2 U8 2 NE  U8 2 U8 1 NE  RET }ASM
warmboot .s                              (  -1 0 -1  OK)  -1 0 -1  OK
reset  OK
( opcode coverage: TRUE FALSE ZE                       )
(    true dup 0=  false dup 0=     1 DUP 0=            )
ASM{ TRUE DUP ZE  FALSE DUP ZE  U8 1 DUP ZE RET }ASM
warmboot .s                        (  -1 0 0 -1 1 0  OK)  -1 0 0 -1 1 0  OK
reset  OK

=== test.vm.test_instructions_jump() ===
( opcode coverage: JMP                            )
( assemble tokens to memory starting at address 0 )
( 0: push 5                                       )
( 2: jump to 8                                    )
( 5: push 6, return                               )
( 8: push 7, jump to 5                            )
( addr: 0 1   2 3 4  5 6   7  8 9  10 11 12       )
(               3------------>8-3=5               )
(                    5-11=-6<---------11          )
ASM{   U8 5 JMP 5 0 U8 6 RET U8 7 JMP 250 255 }ASM
warmboot  OK
.s                                         (  5 7 6  OK)  5 7 6  OK

=== test.vm.test_instructions_jal_return() ===
( opcode coverage: JAL RET                        )
( assemble tokens to memory starting at address 0 )
(  0: JAL  7=0x0007, or [ 7, 0] little endian     )
(  3: JAL 10=0x000A, or [10, 0] little endian     )
(  6: Return                                      )
(  7: Subroutine: push 9 to data stack, return    )
( 10: Subroutine: push 5 to data stack, return    )
( addr: 0 1 2   3 4 5   6  7 8   9 10 11  12      )
(         1--------------->7-1=6                  )
(                 4--------------->10-4=6         )
ASM{  JAL 6 0 JAL 6 0 RET U8 9 RET U8  5 RET }ASM
warmboot  OK
.s                                           (  9 5  OK)  9 5  OK
reset  OK
( opcode coverage: CALL                           )
( addr: 0 1    2  3 4   5   6  *7*  8   9         )
ASM{   U8 7 CALL U8 9 IOD RET   U8 25 RET }ASM
warmboot                                    (  25 9  OK)  25 9  OK
reset  OK
( test JAL pushes return address properly         )
( addr: 0 1   2   3 4 5     6   7  *8*            )
(                   4------------->8-4=4          )
ASM{   U8 3 MTR JAL 4 0 RDROP RET IORH RET }ASM
warmboot                                     (  3 6  OK)  3 6  OK
reset  OK
( test CALL pushes return address properly        )
( addr: 0 1   2  3 4    5     6   7  *8*          )
ASM{   U8 3 MTR U8 8 CALL RDROP RET IORH RET }ASM
warmboot                                     (  3 6  OK)  3 6  OK
reset  OK

=== test.vm.test_instructions_jz() ===
( opcode coverage: BZ                                     )
( equivalent to: 0 dup if{ 7 }if 0 0= dup if{ 8 }IF       )
( addr: 0 1   2  3 4  5 6  7 8  9  10 11 12 13 14  15     )
ASM{   U8 0 DUP BZ 3 U8 7 U8 0 ZE DUP BZ  3 U8  8 RET }ASM
(         0 dup if{       7 }if                           )
(                              0 0= dup if{          8 }if)
warmboot  OK
.s                                        (  0 -1 8  OK)  0 -1 8  OK

=== test.vm.test_instructions_bfor_mtr_r() ===
( opcode coverage: BFOR MTR R      )
(         3 for{  R  }for          )
( addr: 0 1    2 *3*    4 5   6    )
ASM{   U8 3  MTR  R  BFOR 2 RET }ASM
(                        ^^^ 5-3=2 )
warmboot  OK
.s                                       (  3 2 1 0  OK)  3 2 1 0  OK
reset  OK
(       3 for{ r    1 and    42 emit }for     )
(addr:  1   2 *3* 4 5   6  7  8      9   10 11)
ASM{ U8 3 MTR  R U8 1 AND U8 42 IOEMIT BFOR 8 }ASM
(                                   11-3=8 ^^^)
.s                                   (****  1 0 1 0  OK)****  1 0 1 0  OK

( opcode coverage: DROP DUP OVER SWAP   )
( equivalent to: 1 2 over dup drop swap )
ASM{ u8 1 u8 255 over dup drop swap }ASM
warmboot .s                              (  1 1 255  OK)  1 1 255  OK
reset  OK

== vm.test.test_instructions_u8_sb_lb() ===
( opcode coverage: U16 SB LB             )
(     512     1    over b! b@            )
( IR{ 512     1    OVER SB LB }IR        )
ASM{  U16 0 2 U8 1 OVER SB LB }ASM
warmboot .s                                    (  1  OK)  1  OK
reset  OK
(     512     65530       over B! b@     )
( IR{ 512     65530       OVER SB LB }IR )
ASM{  U16 0 2 U8 255 OVER SB LB }ASM
warmboot .s                                  (  255  OK)  255  OK
reset  OK

== vm.test.test_instructions_u16_sh_lh() ===
( opcode coverage: U16 SH LH             )
(     512     1    over h! h@            )
( IR{ 512     1    OVER SH LH }IR        )
ASM{  U16 0 2 U8 1 OVER SH LH }ASM
warmboot .s                                    (  1  OK)  1  OK
reset  OK
(     512     65530       over h! h@     )
( IR{ 512     65530       OVER SH LH }IR )
ASM{  U16 0 2 U16 250 255 OVER SH LH }ASM
warmboot .s                                (  65530  OK)  65530  OK
reset  OK

== vm.test.test_instructions_i32_sw_lw() ===
( opcode coverage: I32 SW LW RESET               )
(     512     -6                  over w! w@     )
( IR{ 512     -6                  OVER SW LW }IR )
ASM{  U16 0 2 I32 250 255 255 255 OVER SW LW }ASM
warmboot .s                                   (  -6  OK)  -6  OK
reset  OK
(     512     2147483647          over w! w@     )
( IR{ 512     2147483647          OVER SW LW }IR )
ASM{  U16 0 2 I32 255 255 255 127 OVER SW LW }ASM
warmboot .s                           (  2147483647  OK)  2147483647  OK
reset  OK

=== test.vm.test_instructions_reset_io() ===
( opcode coverage: RESET IOD             )
( ---------------------------------------)
( IOD -- log data stack decimal          )
(       33 decimal    .s reset           )
ASM{ U8 33 IOD RESET }ASM
warmboot                                      (  33  OK)  33  OK
( ---------------------------------------)
( IODH -- log data stack hex             )
(       33      hex    .s reset          )
ASM{ U8 33 IODH RESET }ASM
warmboot                                      (  21  OK)  21  OK
( ---------------------------------------)
( IORH -- log return stack hex           )
(       33  >r iorh reset                )
ASM{ U8 33 MTR IORH RESET }ASM
warmboot                                      (  21  OK)  21  OK
( ---------------------------------------)
( IOKEY -- echo a line from STDIN        )
( do: 99 for{                            )
(      key                               )
(      0=   if{ rdrop ret }if dup        )
(      10 = if{ rdrop ret }if            )
(      emit                              )
(     }for                               )
( addr: 0  1   2 *3*                     )
ASM{   U8 99 MTR IOKEY
( addr:  4  5  6     7   8 *9*  10 11    )
        ZE BZ  4 RDROP RET DUP  U8 10
( addr: 12 13 14    15  16   *17*        )
        EQ BZ  4 RDROP RET IOEMIT
( addr:   18 19                          )
        BFOR 16                       }ASM
(            ^^^ 19-3=16                 )
warmboot                                       ( test1  OK)test1  OK
( ---------------------------------------)
( IOEMIT -- write to STDOUT              )
( Write space, space, star               )
ASM{ U8 32 IOEMIT U8 32 IOEMIT
     U8 42 IOEMIT RESET           }ASM
warmboot                                       (  *  OK)  *  OK
( Write utf-8 bytes for U+2708 U+FE0F    )
ASM{ U8  32 IOEMIT U8  32 IOEMIT
     U8 226 IOEMIT U8 156 IOEMIT
     U8 136 IOEMIT U8 239 IOEMIT
     U8 184 IOEMIT U8 143 IOEMIT
     RESET                            }ASM
warmboot                                        ( ✈️  OK)  ✈️  OK

=== test.vm.test_instructions_r_pc() ===
( opcode coverage: R PC                  )
( ---------------------------------------)
( R -- Load R, top of return stack       )
(         5 >r  r  .s reset              )
ASM{   U8 5 MTR R IOD RESET }ASM
warmboot                                       (  5  OK)  5  OK
( ---------------------------------------)
( PC -- Load Program Counter             )
(      nop nop pc  .s reset              )
( addr:  0   1  2   3     4              )
ASM{   NOP NOP PC IOD RESET }ASM
warmboot                                       (  3  OK)  3  OK

=== test.vm.test_instructions_mta_lbai_ainc_adec_a() ===
( ---------------------------------------------)
( MTA -- Move T to register A                  )
( LBA -- Load Byte via A                       )
( LBAI -- Load Byte via A, inc A: @a+          )
(         14  >a  @a+  1- for{  @a   a+   emit )
( addr: 0  1   2    3   4    5 *6*    7      8 )
ASM{   U8 13 MTA LBAI DEC  MTR LBA AINC IOEMIT
(             }for reset                       )
( addr:    9 10    11  12                      )
        BFOR  4 RESET RET
( addr: *13*                                   )
          7  32 32 72 101 108 108 111 }ASM
warmboot                                   (  Hello  OK)  Hello  OK
( ---------------------------------------)
( AINC -- Add 1 to A                     )
( A -- push a copy of A to data stack    )
(       4  >a   a+ a  .s reset           )
ASM{ U8 4 MTA AINC A IOD RESET }ASM
warmboot                                       (  5  OK)  5  OK
( ---------------------------------------)
( ADEC -- Subtract 1 from A              )
(       5  >a   a- a  .s reset           )
ASM{ U8 5 MTA ADEC A IOD RESET }ASM
warmboot                                       (  4  OK)  4  OK

=== test.vm.test_instructions_mtb_lbb_lbbi_sbbi_binc_bdec_b() ===
( ---------------------------------------)
( MTB -- Move T to register B            )
( SBBI -- Store Byte via B, inc B: !b+   )
( B -- push a copy of B to data stack    )
(         1  >b b  !b+ b  !b+ b  !b+     )
ASM{   U8 1 MTB B SBBI B SBBI B SBBI
       U8 1 >a a@+ a@+ a@+ IOD RESET }ASM
warmboot                                   (  1 2 3  OK)  1 2 3  OK
( ------------------------------------------)
( LBB -- Load Byte via B                    )
( LBBI -- Load Byte via B, inc B: @a+       )
(         8  >b  @b+  @b  .s reset          )
(     0 1   2    3   4   5     6   7 *8*    )
ASM{ U8 8 MTB LBBI LBB IOD RESET RET 98 99 }ASM
warmboot                                   (  98 99  OK)  98 99  OK
( ---------------------------------------)
( BINC -- Add 1 to B                     )
(       4  >b   b+ b  .s reset           )
ASM{ U8 8 MTA BINC B IOD RESET }ASM
warmboot                                       (  9  OK)  9  OK
( ---------------------------------------)
( BDEC -- Subtract 1 from B              )
(       5  >b   b- b  .s reset           )
ASM{ U8 8 MTB BDEC B IOD RESET }ASM
warmboot                                       (  7  OK)  7  OK

=== test.vm.test_instructions_mte() ===
( opcode coverage: MTE         )
ASM{ RESET U8 1 MTE U8 42 IOEMIT RET }ASM
warmboot                                       (  ERR 1)  ERR 1
ASM{ U8 32 IOEMIT U8 42 IOEMIT RET }ASM
warmboot                                        ( *  OK) *  OK
ASM{ U8 2 MTE U8 42 IOEMIT RET }ASM
warmboot                                       (  ERR 2)  ERR 2

=== test.vm.test_bad_addresses() ===
( Jump aligned with operand beyond end of ram)
(addr  0   1   2   3   4  5   6              )
ASM{  U8 JMP U16 255 255 SB JMP 249 255  }ASM
(                       65535-6 ^^^^^^^      )
warmboot                                      (  ERR 14)  ERR 14
( Call aligned with operand beyond end of ram)
(addr  0   1   2   3   4  5   6              )
ASM{  U8 JAL U16 255 255 SB JMP 249 255  }ASM
(                       65535-6 ^^^^^^^      )
warmboot                                      (  ERR 14)  ERR 14
( U8 aligned with operand beyond end of ram  )
(addr  0  1   2   3   4  5   6               )
ASM{  U8 U8 U16 255 255 SB JMP 249 255  }ASM
(                      65535-6 ^^^^^^^       )
warmboot                                      (  ERR 14)  ERR 14
( U16 aligned with operand beyond end of ram )
(addr  0   1   2   3   4  5   6              )
ASM{  U8 U16 U16 255 255 SB JMP 249 255  }ASM
(                      65535-6 ^^^^^^^       )
warmboot                                      (  ERR 14)  ERR 14
( I32 aligned with operand beyond end of ram )
(addr  0   1   2   3   4  5   6              )
ASM{  U8 I32 U16 255 255 SB JMP 249 255  }ASM
(                      65535-6 ^^^^^^^       )
warmboot                                      (  ERR 14)  ERR 14
( IODUMP of memory range beyond end of ram   )
ASM{ U8 255 U16 250 255 IODUMP  }ASM
warmboot                                       (  ERR 3)  ERR 3

